/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Cyclos471Api);
  }
}(this, function(expect, Cyclos471Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Cyclos471Api.TransactionView();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransactionView', function() {
    it('should create an instance of TransactionView', function() {
      // uncomment below and update the code to test TransactionView
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be.a(Cyclos471Api.TransactionView);
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property accessClient (base name: "accessClient")', function() {
      // uncomment below and update the code to test the property accessClient
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property usersWhichCanAddToContacts (base name: "usersWhichCanAddToContacts")', function() {
      // uncomment below and update the code to test the property usersWhichCanAddToContacts
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property usersWhichCanViewProfile (base name: "usersWhichCanViewProfile")', function() {
      // uncomment below and update the code to test the property usersWhichCanViewProfile
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property by (base name: "by")', function() {
      // uncomment below and update the code to test the property by
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property receivedBy (base name: "receivedBy")', function() {
      // uncomment below and update the code to test the property receivedBy
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property received (base name: "received")', function() {
      // uncomment below and update the code to test the property received
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property customValues (base name: "customValues")', function() {
      // uncomment below and update the code to test the property customValues
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property confirmationPasswordInput (base name: "confirmationPasswordInput")', function() {
      // uncomment below and update the code to test the property confirmationPasswordInput
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property authorizationLevelData (base name: "authorizationLevelData")', function() {
      // uncomment below and update the code to test the property authorizationLevelData
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property authorizationPermissions (base name: "authorizationPermissions")', function() {
      // uncomment below and update the code to test the property authorizationPermissions
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property authorizations (base name: "authorizations")', function() {
      // uncomment below and update the code to test the property authorizations
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property transfer (base name: "transfer")', function() {
      // uncomment below and update the code to test the property transfer
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property scheduledPaymentStatus (base name: "scheduledPaymentStatus")', function() {
      // uncomment below and update the code to test the property scheduledPaymentStatus
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property dueAmount (base name: "dueAmount")', function() {
      // uncomment below and update the code to test the property dueAmount
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property installments (base name: "installments")', function() {
      // uncomment below and update the code to test the property installments
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property recurringPaymentStatus (base name: "recurringPaymentStatus")', function() {
      // uncomment below and update the code to test the property recurringPaymentStatus
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property nextOccurrenceDate (base name: "nextOccurrenceDate")', function() {
      // uncomment below and update the code to test the property nextOccurrenceDate
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property occurrenceInterval (base name: "occurrenceInterval")', function() {
      // uncomment below and update the code to test the property occurrenceInterval
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property occurrencesCount (base name: "occurrencesCount")', function() {
      // uncomment below and update the code to test the property occurrencesCount
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property occurrences (base name: "occurrences")', function() {
      // uncomment below and update the code to test the property occurrences
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property originalTransfer (base name: "originalTransfer")', function() {
      // uncomment below and update the code to test the property originalTransfer
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property chargebackTransfer (base name: "chargebackTransfer")', function() {
      // uncomment below and update the code to test the property chargebackTransfer
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property comments (base name: "comments")', function() {
      // uncomment below and update the code to test the property comments
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property expirationDate (base name: "expirationDate")', function() {
      // uncomment below and update the code to test the property expirationDate
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property paymentRequestStatus (base name: "paymentRequestStatus")', function() {
      // uncomment below and update the code to test the property paymentRequestStatus
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property processDate (base name: "processDate")', function() {
      // uncomment below and update the code to test the property processDate
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property transaction (base name: "transaction")', function() {
      // uncomment below and update the code to test the property transaction
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property smsCode (base name: "smsCode")', function() {
      // uncomment below and update the code to test the property smsCode
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property scheduled (base name: "scheduled")', function() {
      // uncomment below and update the code to test the property scheduled
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property installmentsCount (base name: "installmentsCount")', function() {
      // uncomment below and update the code to test the property installmentsCount
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property firstInstallmentIsImmediate (base name: "firstInstallmentIsImmediate")', function() {
      // uncomment below and update the code to test the property firstInstallmentIsImmediate
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property externalPaymentStatus (base name: "externalPaymentStatus")', function() {
      // uncomment below and update the code to test the property externalPaymentStatus
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property toPrincipalType (base name: "toPrincipalType")', function() {
      // uncomment below and update the code to test the property toPrincipalType
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

    it('should have the property toPrincipalValue (base name: "toPrincipalValue")', function() {
      // uncomment below and update the code to test the property toPrincipalValue
      //var instane = new Cyclos471Api.TransactionView();
      //expect(instance).to.be();
    });

  });

}));
