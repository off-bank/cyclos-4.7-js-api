/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Cyclos471Api);
  }
}(this, function(expect, Cyclos471Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Cyclos471Api.ImagesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImagesApi', function() {
    describe('deleteImage', function() {
      it('should call deleteImage successfully', function(done) {
        //uncomment below and update the code to test deleteImage
        //instance.deleteImage(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAdImagesListData', function() {
      it('should call getAdImagesListData successfully', function(done) {
        //uncomment below and update the code to test getAdImagesListData
        //instance.getAdImagesListData(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContent', function() {
      it('should call getImageContent successfully', function(done) {
        //uncomment below and update the code to test getImageContent
        //instance.getImageContent(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserImagesListData', function() {
      it('should call getUserImagesListData successfully', function(done) {
        //uncomment below and update the code to test getUserImagesListData
        //instance.getUserImagesListData(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAdImages', function() {
      it('should call listAdImages successfully', function(done) {
        //uncomment below and update the code to test listAdImages
        //instance.listAdImages(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTempImages', function() {
      it('should call listTempImages successfully', function(done) {
        //uncomment below and update the code to test listTempImages
        //instance.listTempImages(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserImages', function() {
      it('should call listUserImages successfully', function(done) {
        //uncomment below and update the code to test listUserImages
        //instance.listUserImages(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reorderAdImages', function() {
      it('should call reorderAdImages successfully', function(done) {
        //uncomment below and update the code to test reorderAdImages
        //instance.reorderAdImages(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reorderProfileImages', function() {
      it('should call reorderProfileImages successfully', function(done) {
        //uncomment below and update the code to test reorderProfileImages
        //instance.reorderProfileImages(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadAdImage', function() {
      it('should call uploadAdImage successfully', function(done) {
        //uncomment below and update the code to test uploadAdImage
        //instance.uploadAdImage(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadTempImage', function() {
      it('should call uploadTempImage successfully', function(done) {
        //uncomment below and update the code to test uploadTempImage
        //instance.uploadTempImage(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadUserImage', function() {
      it('should call uploadUserImage successfully', function(done) {
        //uncomment below and update the code to test uploadUserImage
        //instance.uploadUserImage(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewImage', function() {
      it('should call viewImage successfully', function(done) {
        //uncomment below and update the code to test viewImage
        //instance.viewImage(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
