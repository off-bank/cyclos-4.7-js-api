/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Cyclos471Api);
  }
}(this, function(expect, Cyclos471Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Cyclos471Api.PasswordsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PasswordsApi', function() {
    describe('changePassword', function() {
      it('should call changePassword successfully', function(done) {
        //uncomment below and update the code to test changePassword
        //instance.changePassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disablePassword', function() {
      it('should call disablePassword successfully', function(done) {
        //uncomment below and update the code to test disablePassword
        //instance.disablePassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enablePassword', function() {
      it('should call enablePassword successfully', function(done) {
        //uncomment below and update the code to test enablePassword
        //instance.enablePassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generatePassword', function() {
      it('should call generatePassword successfully', function(done) {
        //uncomment below and update the code to test generatePassword
        //instance.generatePassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserPasswordsListData', function() {
      it('should call getUserPasswordsListData successfully', function(done) {
        //uncomment below and update the code to test getUserPasswordsListData
        //instance.getUserPasswordsListData(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserPasswords', function() {
      it('should call listUserPasswords successfully', function(done) {
        //uncomment below and update the code to test listUserPasswords
        //instance.listUserPasswords(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetAndSendPassword', function() {
      it('should call resetAndSendPassword successfully', function(done) {
        //uncomment below and update the code to test resetAndSendPassword
        //instance.resetAndSendPassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetPassword', function() {
      it('should call resetPassword successfully', function(done) {
        //uncomment below and update the code to test resetPassword
        //instance.resetPassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unblockPassword', function() {
      it('should call unblockPassword successfully', function(done) {
        //uncomment below and update the code to test unblockPassword
        //instance.unblockPassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
