/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Cyclos471Api);
  }
}(this, function(expect, Cyclos471Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Cyclos471Api.AuthApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthApi', function() {
    describe('changeForgottenPassword', function() {
      it('should call changeForgottenPassword successfully', function(done) {
        //uncomment below and update the code to test changeForgottenPassword
        //instance.changeForgottenPassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disconnectCurrentClient', function() {
      it('should call disconnectCurrentClient successfully', function(done) {
        //uncomment below and update the code to test disconnectCurrentClient
        //instance.disconnectCurrentClient(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('forgottenPasswordRequest', function() {
      it('should call forgottenPasswordRequest successfully', function(done) {
        //uncomment below and update the code to test forgottenPasswordRequest
        //instance.forgottenPasswordRequest(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCurrentAuth', function() {
      it('should call getCurrentAuth successfully', function(done) {
        //uncomment below and update the code to test getCurrentAuth
        //instance.getCurrentAuth(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataForChangeForgottenPassword', function() {
      it('should call getDataForChangeForgottenPassword successfully', function(done) {
        //uncomment below and update the code to test getDataForChangeForgottenPassword
        //instance.getDataForChangeForgottenPassword(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataForLogin', function() {
      it('should call getDataForLogin successfully', function(done) {
        //uncomment below and update the code to test getDataForLogin
        //instance.getDataForLogin(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('login', function() {
      it('should call login successfully', function(done) {
        //uncomment below and update the code to test login
        //instance.login(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logout', function() {
      it('should call logout successfully', function(done) {
        //uncomment below and update the code to test logout
        //instance.logout(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('newOtp', function() {
      it('should call newOtp successfully', function(done) {
        //uncomment below and update the code to test newOtp
        //instance.newOtp(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
