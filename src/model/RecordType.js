/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InternalNamedEntity', 'model/RecordLayoutEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./InternalNamedEntity'), require('./RecordLayoutEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.RecordType = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.InternalNamedEntity, root.Cyclos471Api.RecordLayoutEnum);
  }
}(this, function(ApiClient, InternalNamedEntity, RecordLayoutEnum) {
  'use strict';




  /**
   * The RecordType model module.
   * @module model/RecordType
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>RecordType</code>.
   * Contains definitions for a record type 
   * @alias module:model/RecordType
   * @class
   * @implements module:model/InternalNamedEntity
   */
  var exports = function() {
    var _this = this;

    InternalNamedEntity.call(_this);


  };

  /**
   * Constructs a <code>RecordType</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RecordType} obj Optional instance to populate.
   * @return {module:model/RecordType} The populated <code>RecordType</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      InternalNamedEntity.constructFromObject(data, obj);
      if (data.hasOwnProperty('pluralName')) {
        obj['pluralName'] = ApiClient.convertToType(data['pluralName'], 'String');
      }
      if (data.hasOwnProperty('layout')) {
        obj['layout'] = RecordLayoutEnum.constructFromObject(data['layout']);
      }
    }
    return obj;
  }

  /**
   * The name for the plural form
   * @member {String} pluralName
   */
  exports.prototype['pluralName'] = undefined;
  /**
   * The layout this record should be presented Possible values are: * tiled: Should show the record list with a form to quickly add a new  * list: Should show a regular search filters / list * single: There should be a single record, with the form directly 
   * @member {module:model/RecordLayoutEnum} layout
   */
  exports.prototype['layout'] = undefined;

  // Implement InternalNamedEntity interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The entity name
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * The entity internal name, which can be seen as an extra identifier 
   * @member {String} internalName
   */
exports.prototype['internalName'] = undefined;



  return exports;
}));


