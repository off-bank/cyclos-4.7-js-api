/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityReference', 'model/Permissions', 'model/RoleEnum', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EntityReference'), require('./Permissions'), require('./RoleEnum'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.Auth = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.EntityReference, root.Cyclos471Api.Permissions, root.Cyclos471Api.RoleEnum, root.Cyclos471Api.User);
  }
}(this, function(ApiClient, EntityReference, Permissions, RoleEnum, User) {
  'use strict';




  /**
   * The Auth model module.
   * @module model/Auth
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>Auth</code>.
   * Contains relevant information for the authenticated user and his granted permissions.  
   * @alias module:model/Auth
   * @class
   */
  var exports = function() {
    var _this = this;













  };

  /**
   * Constructs a <code>Auth</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Auth} obj Optional instance to populate.
   * @return {module:model/Auth} The populated <code>Auth</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('user')) {
        obj['user'] = User.constructFromObject(data['user']);
      }
      if (data.hasOwnProperty('global')) {
        obj['global'] = ApiClient.convertToType(data['global'], 'Boolean');
      }
      if (data.hasOwnProperty('role')) {
        obj['role'] = RoleEnum.constructFromObject(data['role']);
      }
      if (data.hasOwnProperty('systemAdministrator')) {
        obj['systemAdministrator'] = ApiClient.convertToType(data['systemAdministrator'], 'Boolean');
      }
      if (data.hasOwnProperty('aliasOperator')) {
        obj['aliasOperator'] = ApiClient.convertToType(data['aliasOperator'], 'Boolean');
      }
      if (data.hasOwnProperty('permissions')) {
        obj['permissions'] = Permissions.constructFromObject(data['permissions']);
      }
      if (data.hasOwnProperty('sessionToken')) {
        obj['sessionToken'] = ApiClient.convertToType(data['sessionToken'], 'String');
      }
      if (data.hasOwnProperty('accessClient')) {
        obj['accessClient'] = EntityReference.constructFromObject(data['accessClient']);
      }
      if (data.hasOwnProperty('principalType')) {
        obj['principalType'] = EntityReference.constructFromObject(data['principalType']);
      }
      if (data.hasOwnProperty('principal')) {
        obj['principal'] = ApiClient.convertToType(data['principal'], 'String');
      }
      if (data.hasOwnProperty('expiredPassword')) {
        obj['expiredPassword'] = ApiClient.convertToType(data['expiredPassword'], 'Boolean');
      }
      if (data.hasOwnProperty('pendingAgreements')) {
        obj['pendingAgreements'] = ApiClient.convertToType(data['pendingAgreements'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The authenticated user
   * @member {module:model/User} user
   */
  exports.prototype['user'] = undefined;
  /**
   * Indicates whether this user belongs to global mode
   * @member {Boolean} global
   */
  exports.prototype['global'] = undefined;
  /**
   * The main role the user has. Possible values are: * administrator: A user who can manage the system and other users. * broker: A user who can manage other users. * member: A regular user who can manage operators.  * operator: A \"sub-user\" created by a member to manage his data. 
   * @member {module:model/RoleEnum} role
   */
  exports.prototype['role'] = undefined;
  /**
   * Indicates whether this user is a system administrator, that is, either belongs to the global system administrators group or to the network system administrators group 
   * @member {Boolean} systemAdministrator
   */
  exports.prototype['systemAdministrator'] = undefined;
  /**
   * Indicates whether this user is an operator which is an alias of his owner member, that is, has all member permissions, and is not restricted to an operator group. 
   * @member {Boolean} aliasOperator
   */
  exports.prototype['aliasOperator'] = undefined;
  /**
   * The granted permissions for the authenticated user or guest
   * @member {module:model/Permissions} permissions
   */
  exports.prototype['permissions'] = undefined;
  /**
   * A token that must be passed in on the Session-Token header on subsequent requests instead of the login name and password. 
   * @member {String} sessionToken
   */
  exports.prototype['sessionToken'] = undefined;
  /**
   * Only returned when authenticated as access client, contains  information about it 
   * @member {module:model/EntityReference} accessClient
   */
  exports.prototype['accessClient'] = undefined;
  /**
   * Returns a reference to the principal type used for authentication. May be some of the built-in types (login name, e-mail, mobile phone or account number), a profile field, a token type or an access client type 
   * @member {module:model/EntityReference} principalType
   */
  exports.prototype['principalType'] = undefined;
  /**
   * The principal (user identification) used on authentication. Can be the value of the login name, e-mail, account number, custom field or token used on authentication or at the moment of login. Is not returned when the authentication was performed via access client. 
   * @member {String} principal
   */
  exports.prototype['principal'] = undefined;
  /**
   * Returns whether the current access password is expired. If so, the user will have to change the password, or all other actions will be denied. 
   * @member {Boolean} expiredPassword
   */
  exports.prototype['expiredPassword'] = undefined;
  /**
   * Returns whether the current user has some agreements pending accept. If so, a call to GET /agreements/pending should be performed to get the content of the pending agreements, and then a POST  /agreements/pending{id_or_internal_name} to accept each agreement. 
   * @member {Boolean} pendingAgreements
   */
  exports.prototype['pendingAgreements'] = undefined;



  return exports;
}));


