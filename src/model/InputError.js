/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InputErrorCode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./InputErrorCode'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.InputError = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.InputErrorCode);
  }
}(this, function(ApiClient, InputErrorCode) {
  'use strict';




  /**
   * The InputError model module.
   * @module model/InputError
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>InputError</code>.
   * Error returned when some input data failed validation
   * @alias module:model/InputError
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>InputError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InputError} obj Optional instance to populate.
   * @return {module:model/InputError} The populated <code>InputError</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('code')) {
        obj['code'] = InputErrorCode.constructFromObject(data['code']);
      }
      if (data.hasOwnProperty('generalErrors')) {
        obj['generalErrors'] = ApiClient.convertToType(data['generalErrors'], ['String']);
      }
      if (data.hasOwnProperty('propertyErrors')) {
        obj['propertyErrors'] = ApiClient.convertToType(data['propertyErrors'], {'String': ['String']});
      }
      if (data.hasOwnProperty('customFieldErrors')) {
        obj['customFieldErrors'] = ApiClient.convertToType(data['customFieldErrors'], {'String': ['String']});
      }
      if (data.hasOwnProperty('maxItems')) {
        obj['maxItems'] = ApiClient.convertToType(data['maxItems'], 'Number');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
    }
    return obj;
  }

  /**
   * Error codes for 422 Unprocessable entity HTTP status. It means there was an error with the input sent to the operation.  Possible values are: * validation: One or more of the fields sent contains invalid values * maxItems: There was an attempt to create an item, but the maximum number of allowed items was exceeded * queryParse: A full-text query keywords contained an invalid text * dataConversion: Some data conversion has failed. For example, when sending a date with an invalid format  
   * @member {module:model/InputErrorCode} code
   */
  exports.prototype['code'] = undefined;
  /**
   * A list of errors that cannot be attributed to a specific property. Only returned if `code` is `validation`. 
   * @member {Array.<String>} generalErrors
   */
  exports.prototype['generalErrors'] = undefined;
  /**
   * An object keyed by property name, whose values are lists of errors for that property. Only returned if `code` is `validation`. 
   * @member {Object.<String, Array.<String>>} propertyErrors
   */
  exports.prototype['propertyErrors'] = undefined;
  /**
   * An object keyed by custom field internal name, whose values are lists of errors for that custom field. Only returned if `code` is `validation`. 
   * @member {Object.<String, Array.<String>>} customFieldErrors
   */
  exports.prototype['customFieldErrors'] = undefined;
  /**
   * The maximum allowed items. Only returned if `code` is `maxItems`. 
   * @member {Number} maxItems
   */
  exports.prototype['maxItems'] = undefined;
  /**
   * The value that failed conversion to the expected data type, or the original full-text query keywords that failed parsing. Only returned if `code` is either `dataConversion` or `queryParse`. 
   * @member {String} value
   */
  exports.prototype['value'] = undefined;



  return exports;
}));


