/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.UserManage = factory(root.Cyclos471Api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The UserManage model module.
   * @module model/UserManage
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>UserManage</code>.
   * Contains the fields for either creating or modifying an user
   * @alias module:model/UserManage
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>UserManage</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserManage} obj Optional instance to populate.
   * @return {module:model/UserManage} The populated <code>UserManage</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('username')) {
        obj['username'] = ApiClient.convertToType(data['username'], 'String');
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('customValues')) {
        obj['customValues'] = ApiClient.convertToType(data['customValues'], {'String': 'String'});
      }
      if (data.hasOwnProperty('hiddenFields')) {
        obj['hiddenFields'] = ApiClient.convertToType(data['hiddenFields'], ['String']);
      }
    }
    return obj;
  }

  /**
   * The user's full name
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The user's login name
   * @member {String} username
   */
  exports.prototype['username'] = undefined;
  /**
   * The user's e-mail
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use either the `GET /users/data-for-new` (when creating) or `GET /users/{user}/data-for-edit` (when modifying) an user, and lookup each field by either internal name. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}` 
   * @member {Object.<String, String>} customValues
   */
  exports.prototype['customValues'] = undefined;
  /**
   * An array with the internal names of either the basic or custom fields that should be hidden from other users. Currently the only basic profile field that can be hidden is email. Any other will be considered a custom field, and should be the same key as used in the 'customValues' property. 
   * @member {Array.<String>} hiddenFields
   */
  exports.prototype['hiddenFields'] = undefined;



  return exports;
}));


