/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BigDecimal'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.AccountStatus = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal);
  }
}(this, function(ApiClient, BigDecimal) {
  'use strict';




  /**
   * The AccountStatus model module.
   * @module model/AccountStatus
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>AccountStatus</code>.
   * Status information for an account
   * @alias module:model/AccountStatus
   * @class
   */
  var exports = function() {
    var _this = this;











  };

  /**
   * Constructs a <code>AccountStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountStatus} obj Optional instance to populate.
   * @return {module:model/AccountStatus} The populated <code>AccountStatus</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('balance')) {
        obj['balance'] = ApiClient.convertToType(data['balance'], BigDecimal);
      }
      if (data.hasOwnProperty('creditLimit')) {
        obj['creditLimit'] = ApiClient.convertToType(data['creditLimit'], BigDecimal);
      }
      if (data.hasOwnProperty('upperCreditLimit')) {
        obj['upperCreditLimit'] = ApiClient.convertToType(data['upperCreditLimit'], BigDecimal);
      }
      if (data.hasOwnProperty('reservedAmount')) {
        obj['reservedAmount'] = ApiClient.convertToType(data['reservedAmount'], BigDecimal);
      }
      if (data.hasOwnProperty('availableBalance')) {
        obj['availableBalance'] = ApiClient.convertToType(data['availableBalance'], BigDecimal);
      }
      if (data.hasOwnProperty('negativeSince')) {
        obj['negativeSince'] = ApiClient.convertToType(data['negativeSince'], 'Date');
      }
      if (data.hasOwnProperty('ARate')) {
        obj['ARate'] = ApiClient.convertToType(data['ARate'], BigDecimal);
      }
      if (data.hasOwnProperty('DRate')) {
        obj['DRate'] = ApiClient.convertToType(data['DRate'], BigDecimal);
      }
      if (data.hasOwnProperty('rateBalanceCorrection')) {
        obj['rateBalanceCorrection'] = ApiClient.convertToType(data['rateBalanceCorrection'], BigDecimal);
      }
      if (data.hasOwnProperty('virtualRatedBalance')) {
        obj['virtualRatedBalance'] = ApiClient.convertToType(data['virtualRatedBalance'], BigDecimal);
      }
    }
    return obj;
  }

  /**
   * The raw account balance
   * @member {module:model/BigDecimal} balance
   */
  exports.prototype['balance'] = undefined;
  /**
   * The maximum negative balance an account may get
   * @member {module:model/BigDecimal} creditLimit
   */
  exports.prototype['creditLimit'] = undefined;
  /**
   * The maximum positive balance an account may get
   * @member {module:model/BigDecimal} upperCreditLimit
   */
  exports.prototype['upperCreditLimit'] = undefined;
  /**
   * The reserved amount is part of the raw balance, but cannot be used for payments because of some other events, like payments pending authorization, confirmed webshop orders, scheduled payments (when configured to reserve the total amount) and so on. 
   * @member {module:model/BigDecimal} reservedAmount
   */
  exports.prototype['reservedAmount'] = undefined;
  /**
   * The available balance to be used, taking into account the raw balance, credit limit and reserved amount  
   * @member {module:model/BigDecimal} availableBalance
   */
  exports.prototype['availableBalance'] = undefined;
  /**
   * If the account is negative, contains the date since it became so  
   * @member {Date} negativeSince
   */
  exports.prototype['negativeSince'] = undefined;
  /**
   * The balance aging counter
   * @member {module:model/BigDecimal} ARate
   */
  exports.prototype['ARate'] = undefined;
  /**
   * The balance maturity
   * @member {module:model/BigDecimal} DRate
   */
  exports.prototype['DRate'] = undefined;
  /**
   * @member {module:model/BigDecimal} rateBalanceCorrection
   */
  exports.prototype['rateBalanceCorrection'] = undefined;
  /**
   * @member {module:model/BigDecimal} virtualRatedBalance
   */
  exports.prototype['virtualRatedBalance'] = undefined;



  return exports;
}));


