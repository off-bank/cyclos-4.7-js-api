/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CustomFieldValue', 'model/Record', 'model/RecordKind', 'model/RecordType', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CustomFieldValue'), require('./Record'), require('./RecordKind'), require('./RecordType'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.RecordView = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.CustomFieldValue, root.Cyclos471Api.Record, root.Cyclos471Api.RecordKind, root.Cyclos471Api.RecordType, root.Cyclos471Api.User);
  }
}(this, function(ApiClient, CustomFieldValue, Record, RecordKind, RecordType, User) {
  'use strict';




  /**
   * The RecordView model module.
   * @module model/RecordView
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>RecordView</code>.
   * Detailed information when viewing a record
   * @alias module:model/RecordView
   * @class
   * @implements module:model/Record
   */
  var exports = function() {
    var _this = this;

    Record.call(_this);









  };

  /**
   * Constructs a <code>RecordView</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RecordView} obj Optional instance to populate.
   * @return {module:model/RecordView} The populated <code>RecordView</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Record.constructFromObject(data, obj);
      if (data.hasOwnProperty('type')) {
        obj['type'] = RecordType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('user')) {
        obj['user'] = User.constructFromObject(data['user']);
      }
      if (data.hasOwnProperty('creationDate')) {
        obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
      }
      if (data.hasOwnProperty('createdBy')) {
        obj['createdBy'] = User.constructFromObject(data['createdBy']);
      }
      if (data.hasOwnProperty('lastModificationDate')) {
        obj['lastModificationDate'] = ApiClient.convertToType(data['lastModificationDate'], 'Date');
      }
      if (data.hasOwnProperty('lastModifiedBy')) {
        obj['lastModifiedBy'] = User.constructFromObject(data['lastModifiedBy']);
      }
      if (data.hasOwnProperty('customValues')) {
        obj['customValues'] = ApiClient.convertToType(data['customValues'], [CustomFieldValue]);
      }
      if (data.hasOwnProperty('edit')) {
        obj['edit'] = ApiClient.convertToType(data['edit'], 'Boolean');
      }
      if (data.hasOwnProperty('remove')) {
        obj['remove'] = ApiClient.convertToType(data['remove'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The record type
   * @member {module:model/RecordType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The user which owns this record, only returned if `kind` is `user` 
   * @member {module:model/User} user
   */
  exports.prototype['user'] = undefined;
  /**
   * The record creation date
   * @member {Date} creationDate
   */
  exports.prototype['creationDate'] = undefined;
  /**
   * Reference to the user that created the record
   * @member {module:model/User} createdBy
   */
  exports.prototype['createdBy'] = undefined;
  /**
   * The record last modification date
   * @member {Date} lastModificationDate
   */
  exports.prototype['lastModificationDate'] = undefined;
  /**
   * Reference to the user that last modified the record
   * @member {module:model/User} lastModifiedBy
   */
  exports.prototype['lastModifiedBy'] = undefined;
  /**
   * The list of custom field values this record has
   * @member {Array.<module:model/CustomFieldValue>} customValues
   */
  exports.prototype['customValues'] = undefined;
  /**
   * Can the authenticated user edit this record?
   * @member {Boolean} edit
   */
  exports.prototype['edit'] = undefined;
  /**
   * Can the authenticated user remove this record?
   * @member {Boolean} remove
   */
  exports.prototype['remove'] = undefined;

  // Implement Record interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The possible kinds of a record, which can either belong to system or to an user Possible values are: * user: The record belongs to a specific user * system: The record belongs to the system, and is unrelated to an user 
   * @member {module:model/RecordKind} kind
   */
exports.prototype['kind'] = undefined;



  return exports;
}));


