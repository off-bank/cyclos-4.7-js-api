/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/Currency', 'model/Error', 'model/ErrorKind', 'model/PaymentError', 'model/RedeemVoucherErrorCode', 'model/VoucherStatusEnum', 'model/WeekDayEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BigDecimal'), require('./Currency'), require('./Error'), require('./ErrorKind'), require('./PaymentError'), require('./RedeemVoucherErrorCode'), require('./VoucherStatusEnum'), require('./WeekDayEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.RedeemVoucherError = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.Currency, root.Cyclos471Api.Error, root.Cyclos471Api.ErrorKind, root.Cyclos471Api.PaymentError, root.Cyclos471Api.RedeemVoucherErrorCode, root.Cyclos471Api.VoucherStatusEnum, root.Cyclos471Api.WeekDayEnum);
  }
}(this, function(ApiClient, BigDecimal, Currency, Error, ErrorKind, PaymentError, RedeemVoucherErrorCode, VoucherStatusEnum, WeekDayEnum) {
  'use strict';




  /**
   * The RedeemVoucherError model module.
   * @module model/RedeemVoucherError
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>RedeemVoucherError</code>.
   * Error when redeeming a voucher
   * @alias module:model/RedeemVoucherError
   * @class
   * @implements module:model/Error
   * @param exceptionType {String} The server exception class name (not intended to be shown to  final users. Only for logging purposes) 
   */
  var exports = function(exceptionType) {
    var _this = this;

    Error.call(_this, exceptionType);









  };

  /**
   * Constructs a <code>RedeemVoucherError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RedeemVoucherError} obj Optional instance to populate.
   * @return {module:model/RedeemVoucherError} The populated <code>RedeemVoucherError</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Error.constructFromObject(data, obj);
      if (data.hasOwnProperty('code')) {
        obj['code'] = RedeemVoucherErrorCode.constructFromObject(data['code']);
      }
      if (data.hasOwnProperty('voucherStatus')) {
        obj['voucherStatus'] = VoucherStatusEnum.constructFromObject(data['voucherStatus']);
      }
      if (data.hasOwnProperty('allowedDays')) {
        obj['allowedDays'] = ApiClient.convertToType(data['allowedDays'], [WeekDayEnum]);
      }
      if (data.hasOwnProperty('redeemAfterDate')) {
        obj['redeemAfterDate'] = ApiClient.convertToType(data['redeemAfterDate'], 'Date');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = Currency.constructFromObject(data['currency']);
      }
      if (data.hasOwnProperty('amountLeftForRedeeming')) {
        obj['amountLeftForRedeeming'] = ApiClient.convertToType(data['amountLeftForRedeeming'], BigDecimal);
      }
      if (data.hasOwnProperty('currentOpenAmount')) {
        obj['currentOpenAmount'] = ApiClient.convertToType(data['currentOpenAmount'], BigDecimal);
      }
      if (data.hasOwnProperty('maxOpenAmount')) {
        obj['maxOpenAmount'] = ApiClient.convertToType(data['maxOpenAmount'], BigDecimal);
      }
      if (data.hasOwnProperty('paymentError')) {
        obj['paymentError'] = PaymentError.constructFromObject(data['paymentError']);
      }
    }
    return obj;
  }

  /**
   * Possible errors when redeeming a voucher Possible values are: * notAllowedYet: The redeem period for this voucher has not arrived yet * notAllowedToday: This voucher cannot be redeemed today  * notAllowedForUser: This user cannot redeem this voucher * notAllowedForVoucher: This voucher cannot be redeemed * userBlocked: The user has been blocked by exceeding redeem tries * unexpected: An unexpected error has occurred. See the `exceptionType` and `exceptionMessage` fields for the internal information. 
   * @member {module:model/RedeemVoucherErrorCode} code
   */
  exports.prototype['code'] = undefined;
  /**
   * Only if `code` is `notAllowedForVoucher` Possible values are: * open: The voucher has been generated / bought, and is open * expired: The voucher has expired without being redeemed * canceled: The voucher was canceled, and cannot be further used * redeemed: The voucher has been redeemed, and the corresponding payment was done 
   * @member {module:model/VoucherStatusEnum} voucherStatus
   */
  exports.prototype['voucherStatus'] = undefined;
  /**
   * Only if `code` is `notAllowedToday` Possibles values for each array element are: * sun: Sunday * mon: Monday * tue: Tuesday * wed: Wednesday * thu: Thursday * fri: Friday * sat: Saturday 
   * @member {Array.<module:model/WeekDayEnum>} allowedDays
   */
  exports.prototype['allowedDays'] = undefined;
  /**
   * Indicates the date after which this voucher can be redeemed. Only if `code` is `notAllowedYet`. 
   * @member {Date} redeemAfterDate
   */
  exports.prototype['redeemAfterDate'] = undefined;
  /**
   * Currency reference. Only if `code` is `notAllowedForVoucher`           
   * @member {module:model/Currency} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * Indicates the maximum amount the user can buy this time without exceeding the maximum. Only if `code` is `notAllowedForVoucher`. 
   * @member {module:model/BigDecimal} amountLeftForRedeeming
   */
  exports.prototype['amountLeftForRedeeming'] = undefined;
  /**
   * Indicates the current total amount that is open. Only if `code` is `notAllowedForVoucher`. 
   * @member {module:model/BigDecimal} currentOpenAmount
   */
  exports.prototype['currentOpenAmount'] = undefined;
  /**
   * Indicates the maximum total open amount. Only if `code` is `notAllowedForVoucher`. 
   * @member {module:model/BigDecimal} maxOpenAmount
   */
  exports.prototype['maxOpenAmount'] = undefined;
  /**
   * The `PaymentError` generated when the voucher payment was being created. Only if `code` is `notAllowedForVoucher`. 
   * @member {module:model/PaymentError} paymentError
   */
  exports.prototype['paymentError'] = undefined;

  // Implement Error interface:
  /**
   * Error types associated to the HTTP Status 500 Possible values are: * payment: An error has occurred when making a payment * pos: An error has occurred when receiving a payment on a POS operation * buyVoucher: An error has occurred when buying a voucher  * redeemVoucher: An error has occurred when redeeming a voucher  * otp: An error has occurred requesting an OTP * initializeNfc: An error has occurred when initializing a NFC token * personalizeNfc: An error has occurred when personalizing a NFC token * nfcAuth: An error has occurred when making an external NFC authentication * general: An unexpected error has occurred 
   * @member {module:model/ErrorKind} kind
   */
exports.prototype['kind'] = undefined;

  /**
   * The server exception class name (not intended to be shown to  final users. Only for logging purposes) 
   * @member {String} exceptionType
   */
exports.prototype['exceptionType'] = undefined;

  /**
   * The server exception message (not intended to be shown to  final users. Only for logging purposes) 
   * @member {String} exceptionMessage
   */
exports.prototype['exceptionMessage'] = undefined;



  return exports;
}));


