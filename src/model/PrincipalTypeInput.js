/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CustomFieldDetailed', 'model/PrincipalType', 'model/PrincipalTypeKind', 'model/TokenTypeEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CustomFieldDetailed'), require('./PrincipalType'), require('./PrincipalTypeKind'), require('./TokenTypeEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.PrincipalTypeInput = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.CustomFieldDetailed, root.Cyclos471Api.PrincipalType, root.Cyclos471Api.PrincipalTypeKind, root.Cyclos471Api.TokenTypeEnum);
  }
}(this, function(ApiClient, CustomFieldDetailed, PrincipalType, PrincipalTypeKind, TokenTypeEnum) {
  'use strict';




  /**
   * The PrincipalTypeInput model module.
   * @module model/PrincipalTypeInput
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>PrincipalTypeInput</code>.
   * Definition on how a principal value can be entered by the user
   * @alias module:model/PrincipalTypeInput
   * @class
   * @implements module:model/PrincipalType
   */
  var exports = function() {
    var _this = this;

    PrincipalType.call(_this);





  };

  /**
   * Constructs a <code>PrincipalTypeInput</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PrincipalTypeInput} obj Optional instance to populate.
   * @return {module:model/PrincipalTypeInput} The populated <code>PrincipalTypeInput</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      PrincipalType.constructFromObject(data, obj);
      if (data.hasOwnProperty('customField')) {
        obj['customField'] = CustomFieldDetailed.constructFromObject(data['customField']);
      }
      if (data.hasOwnProperty('tokenType')) {
        obj['tokenType'] = TokenTypeEnum.constructFromObject(data['tokenType']);
      }
      if (data.hasOwnProperty('mask')) {
        obj['mask'] = ApiClient.convertToType(data['mask'], 'String');
      }
      if (data.hasOwnProperty('allowManualInput')) {
        obj['allowManualInput'] = ApiClient.convertToType(data['allowManualInput'], 'Boolean');
      }
      if (data.hasOwnProperty('example')) {
        obj['example'] = ApiClient.convertToType(data['example'], 'String');
      }
    }
    return obj;
  }

  /**
   * If this principal is based on a custom field, holds its definition 
   * @member {module:model/CustomFieldDetailed} customField
   */
  exports.prototype['customField'] = undefined;
  /**
   * If this principal is a token, contains its type Possible values are: * nfcTag: A NFC tag/card  * nfcDevice: A device (e.g. cell phone) with support for NFC * barcode: A barcode with the token * swipe: A swipe/magnetic card containing the token * other: Any other type containing a token 
   * @member {module:model/TokenTypeEnum} tokenType
   */
  exports.prototype['tokenType'] = undefined;
  /**
   * If this principal is either a token or account number, holds the (optional) mask which clients can use to input the value. 
   * @member {String} mask
   */
  exports.prototype['mask'] = undefined;
  /**
   * Specifies if the principal type allows enter manually the token value. 
   * @member {Boolean} allowManualInput
   */
  exports.prototype['allowManualInput'] = undefined;
  /**
   * If this principal is mobile phone, holds an example number. 
   * @member {String} example
   */
  exports.prototype['example'] = undefined;

  // Implement PrincipalType interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The entity name
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * The entity internal name, which can be seen as an extra identifier 
   * @member {String} internalName
   */
exports.prototype['internalName'] = undefined;

  /**
   * The kind of this principal type
   * @member {module:model/PrincipalTypeKind} kind
   */
exports.prototype['kind'] = undefined;



  return exports;
}));


