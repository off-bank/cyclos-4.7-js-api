/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NotificationLevelEnum', 'model/OperationResultTypeEnum', 'model/RunOperationResultColumn', 'model/RunOperationResultRow'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NotificationLevelEnum'), require('./OperationResultTypeEnum'), require('./RunOperationResultColumn'), require('./RunOperationResultRow'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.RunOperationResult = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.NotificationLevelEnum, root.Cyclos471Api.OperationResultTypeEnum, root.Cyclos471Api.RunOperationResultColumn, root.Cyclos471Api.RunOperationResultRow);
  }
}(this, function(ApiClient, NotificationLevelEnum, OperationResultTypeEnum, RunOperationResultColumn, RunOperationResultRow) {
  'use strict';




  /**
   * The RunOperationResult model module.
   * @module model/RunOperationResult
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>RunOperationResult</code>.
   * Defines what is returned when a custom operation is executed. The actual property that are filled depend on the &#x60;resultType&#x60; property. Not returned when the &#x60;resultType&#x60; is file. In that case, the response content will be the file content  
   * @alias module:model/RunOperationResult
   * @class
   */
  var exports = function() {
    var _this = this;









  };

  /**
   * Constructs a <code>RunOperationResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RunOperationResult} obj Optional instance to populate.
   * @return {module:model/RunOperationResult} The populated <code>RunOperationResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('resultType')) {
        obj['resultType'] = OperationResultTypeEnum.constructFromObject(data['resultType']);
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = ApiClient.convertToType(data['content'], 'String');
      }
      if (data.hasOwnProperty('notification')) {
        obj['notification'] = ApiClient.convertToType(data['notification'], 'String');
      }
      if (data.hasOwnProperty('notificationLevel')) {
        obj['notificationLevel'] = NotificationLevelEnum.constructFromObject(data['notificationLevel']);
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('columns')) {
        obj['columns'] = ApiClient.convertToType(data['columns'], [RunOperationResultColumn]);
      }
      if (data.hasOwnProperty('rows')) {
        obj['rows'] = ApiClient.convertToType(data['rows'], [RunOperationResultRow]);
      }
    }
    return obj;
  }

  /**
   * The kind of data a custom operation execution is expected to return Possible values are: * notification: Returns a text to be displayed as a simple notification * plainText: Returns a plain text to be displayed in a page, and optionally printed * richText: Returns an HTML formatted text to be displayed in a page, and optionally printed * fileDownload: Returns a file, which can be downloaded * url: The result should be an URL to which the client should be redirected to * externalRedirect: The main execution returns an URL for another service.   Then a second execution is expected when this other service redirects the client back to Cyclos * resultPage: Returns a page or list of results, which should be displayed in a table like any other search / list 
   * @member {module:model/OperationResultTypeEnum} resultType
   */
  exports.prototype['resultType'] = undefined;
  /**
   * The text title. May be returned only if `resultType` is either `plainText`, `richText` or `resultPage`. 
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * The execution result content. Only returned if `resultType` is either `plainText` or  `richText`. 
   * @member {String} content
   */
  exports.prototype['content'] = undefined;
  /**
   * The execution result as string that should be shown as a notification. Only returned if `resultType` is `notification`. 
   * @member {String} notification
   */
  exports.prototype['notification'] = undefined;
  /**
   * Only returned if `resultType` is `notification`. Possible values are: * information: A general informative message * warning: A warning message, when special caution is required * error: An error message, when some operation went wrong   
   * @member {module:model/NotificationLevelEnum} notificationLevel
   */
  exports.prototype['notificationLevel'] = undefined;
  /**
   * The execution result as an URL, to which the client should be redirected. Only returned if `resultType` is either `externalRedirect` or `url`. 
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * Contains the definitions for each column in the result. Only returned if `resultType` is `resultPage`.  
   * @member {Array.<module:model/RunOperationResultColumn>} columns
   */
  exports.prototype['columns'] = undefined;
  /**
   * Each row is an object containing the cells for that row, keyed by each column's `property`. Only returned if `resultType` is `resultPage`. 
   * @member {Array.<module:model/RunOperationResultRow>} rows
   */
  exports.prototype['rows'] = undefined;



  return exports;
}));


