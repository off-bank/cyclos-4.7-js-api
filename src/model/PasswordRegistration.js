/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.PasswordRegistration = factory(root.Cyclos471Api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PasswordRegistration model module.
   * @module model/PasswordRegistration
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>PasswordRegistration</code>.
   * Data regarding a password being registered with the user
   * @alias module:model/PasswordRegistration
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>PasswordRegistration</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PasswordRegistration} obj Optional instance to populate.
   * @return {module:model/PasswordRegistration} The populated <code>PasswordRegistration</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
      if (data.hasOwnProperty('checkConfirmation')) {
        obj['checkConfirmation'] = ApiClient.convertToType(data['checkConfirmation'], 'Boolean');
      }
      if (data.hasOwnProperty('confirmationValue')) {
        obj['confirmationValue'] = ApiClient.convertToType(data['confirmationValue'], 'String');
      }
      if (data.hasOwnProperty('forceChange')) {
        obj['forceChange'] = ApiClient.convertToType(data['forceChange'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The password type
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The password value
   * @member {String} value
   */
  exports.prototype['value'] = undefined;
  /**
   * Depending on the client, if a confirm password field is shown to users, it might be useful to check the confirmation password value on the server. This way, if there are other validation exceptions, they are all shown together. In this case, this field should be set to `true` and the `confirmationValue` should be passed in with the user input. However, in cases where clients just want to register an user with a password non interactively (like in a bulk registration), passing the password value twice is not desirable. In such cases, this field can be left empty (or set to `false`), and the `confirmationValue` will be ignored. 
   * @member {Boolean} checkConfirmation
   */
  exports.prototype['checkConfirmation'] = undefined;
  /**
   * The password confirmation value. Is ignored unless `checkConfirmation` is set to `true`. 
   * @member {String} confirmationValue
   */
  exports.prototype['confirmationValue'] = undefined;
  /**
   * When set to true will force the user to change it after the first login 
   * @member {Boolean} forceChange
   */
  exports.prototype['forceChange'] = undefined;



  return exports;
}));


