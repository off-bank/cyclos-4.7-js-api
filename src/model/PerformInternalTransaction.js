/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/PerformTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BigDecimal'), require('./PerformTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.PerformInternalTransaction = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.PerformTransaction);
  }
}(this, function(ApiClient, BigDecimal, PerformTransaction) {
  'use strict';




  /**
   * The PerformInternalTransaction model module.
   * @module model/PerformInternalTransaction
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>PerformInternalTransaction</code>.
   * Base definitions to performing a transaction to an internal account (any except &#x60;externalPayment&#x60;, or &#x60;chargeback&#x60; which is performed distinctly). 
   * @alias module:model/PerformInternalTransaction
   * @class
   * @implements module:model/PerformTransaction
   */
  var exports = function() {
    var _this = this;

    PerformTransaction.call(_this);


  };

  /**
   * Constructs a <code>PerformInternalTransaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PerformInternalTransaction} obj Optional instance to populate.
   * @return {module:model/PerformInternalTransaction} The populated <code>PerformInternalTransaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      PerformTransaction.constructFromObject(data, obj);
      if (data.hasOwnProperty('fromName')) {
        obj['fromName'] = ApiClient.convertToType(data['fromName'], 'String');
      }
      if (data.hasOwnProperty('toName')) {
        obj['toName'] = ApiClient.convertToType(data['toName'], 'String');
      }
    }
    return obj;
  }

  /**
   * If the payment type allows setting a custom name for the origin account, is its name. If not allowed, is ignored. For example, integration with other systems could use 'Bank account [IBAN]'. 
   * @member {String} fromName
   */
  exports.prototype['fromName'] = undefined;
  /**
   * If the payment type allows setting a custom name for the destination account, is its name. If not allowed, is ignored. For example, integration with other systems could use 'Bank account [IBAN]'. 
   * @member {String} toName
   */
  exports.prototype['toName'] = undefined;

  // Implement PerformTransaction interface:
  /**
   * The payment destination (in case of perform payment) or payer (in case of receive payment). Either an user principal (id, login name,  etc) or the word `system` when the payment is to be performed to / from a system account.  
   * @member {String} subject
   */
exports.prototype['subject'] = undefined;

  /**
   * The transaction amount
   * @member {module:model/BigDecimal} amount
   */
exports.prototype['amount'] = undefined;

  /**
   * The (optional) transaction description
   * @member {String} description
   */
exports.prototype['description'] = undefined;

  /**
   * The currency id or internal name. Only used when not specifying a payment type. In this case, will narrow the search for the it. 
   * @member {String} currency
   */
exports.prototype['currency'] = undefined;

  /**
   * The payment type, either the id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is specified, if a single one is possible, it will be used. If a currency is specified, it will be taken into account in order to find the payment type. If, however, there would be multiple possibilities, a validation error is returned. 
   * @member {String} type
   */
exports.prototype['type'] = undefined;

  /**
   * Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. 
   * @member {Object.<String, String>} customValues
   */
exports.prototype['customValues'] = undefined;

  /**
   * If this transacction is used with a NFC token, must be the challenge (as returned by the server) encrypted by the NFC chip, encoded in HEX form (2 hex chars per byte). 
   * @member {String} nfcChallence
   */
exports.prototype['nfcChallence'] = undefined;



  return exports;
}));


