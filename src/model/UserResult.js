/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Address', 'model/EntityReference', 'model/Image', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Address'), require('./EntityReference'), require('./Image'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.UserResult = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.Address, root.Cyclos471Api.EntityReference, root.Cyclos471Api.Image, root.Cyclos471Api.User);
  }
}(this, function(ApiClient, Address, EntityReference, Image, User) {
  'use strict';




  /**
   * The UserResult model module.
   * @module model/UserResult
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>UserResult</code>.
   * Data returned from user search
   * @alias module:model/UserResult
   * @class
   * @implements module:model/User
   */
  var exports = function() {
    var _this = this;

    User.call(_this);










  };

  /**
   * Constructs a <code>UserResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserResult} obj Optional instance to populate.
   * @return {module:model/UserResult} The populated <code>UserResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      User.constructFromObject(data, obj);
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('username')) {
        obj['username'] = ApiClient.convertToType(data['username'], 'String');
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('address')) {
        obj['address'] = Address.constructFromObject(data['address']);
      }
      if (data.hasOwnProperty('distance')) {
        obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
      }
      if (data.hasOwnProperty('customValues')) {
        obj['customValues'] = ApiClient.convertToType(data['customValues'], {'String': 'String'});
      }
      if (data.hasOwnProperty('phone')) {
        obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
      }
      if (data.hasOwnProperty('accountNumber')) {
        obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
      }
      if (data.hasOwnProperty('group')) {
        obj['group'] = EntityReference.constructFromObject(data['group']);
      }
      if (data.hasOwnProperty('groupSet')) {
        obj['groupSet'] = EntityReference.constructFromObject(data['groupSet']);
      }
    }
    return obj;
  }

  /**
   * The user's full name
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The user's login name
   * @member {String} username
   */
  exports.prototype['username'] = undefined;
  /**
   * The user's e-mail
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * Address to be placed on map. Is only returned when the search result type is `map`. 
   * @member {module:model/Address} address
   */
  exports.prototype['address'] = undefined;
  /**
   * Only returned when there is a base location to calculate the distance from. The unit (kilometers or miles) depends on configuration. 
   * @member {Number} distance
   */
  exports.prototype['distance'] = undefined;
  /**
   * Holds the values for custom fields, keyed by field internal name or id. The format of the value depends on the custom field type. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}` 
   * @member {Object.<String, String>} customValues
   */
  exports.prototype['customValues'] = undefined;
  /**
   * First phone number, used when phone is marked on products to be returned on user list 
   * @member {String} phone
   */
  exports.prototype['phone'] = undefined;
  /**
   * First account number, used when account number is marked on products to be returned on user list 
   * @member {String} accountNumber
   */
  exports.prototype['accountNumber'] = undefined;
  /**
   * The user group. Only returned when the `includeGroup` parameter is set to `true` and the current user can see other users' groups. 
   * @member {module:model/EntityReference} group
   */
  exports.prototype['group'] = undefined;
  /**
   * The user group. Only returned when the `includeGroupSet` parameter is set to `true` and the current user can see other users' group set. 
   * @member {module:model/EntityReference} groupSet
   */
  exports.prototype['groupSet'] = undefined;

  // Implement User interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * Contains the formatting of the user according to the  configuration. Is only returned if no profile fields are marked to return in user list 
   * @member {String} display
   */
exports.prototype['display'] = undefined;

  /**
   * Contains the short formatting of the user according to the configuration. Is only returned if no profile fields are marked to return in user list 
   * @member {String} shortDisplay
   */
exports.prototype['shortDisplay'] = undefined;

  /**
   * The primary user profile image
   * @member {module:model/Image} image
   */
exports.prototype['image'] = undefined;

  /**
   * Is the operator owner, only returned if this user represents an operator. Even so, in some cases, like searching for operators of a specific user, this field may not be returned. 
   * @member {module:model/User} user
   */
exports.prototype['user'] = undefined;



  return exports;
}));


