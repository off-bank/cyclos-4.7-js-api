/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PasswordPermissions', 'model/PasswordStatusEnum', 'model/PasswordType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PasswordPermissions'), require('./PasswordStatusEnum'), require('./PasswordType'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.PasswordStatusAndPermissions = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.PasswordPermissions, root.Cyclos471Api.PasswordStatusEnum, root.Cyclos471Api.PasswordType);
  }
}(this, function(ApiClient, PasswordPermissions, PasswordStatusEnum, PasswordType) {
  'use strict';




  /**
   * The PasswordStatusAndPermissions model module.
   * @module model/PasswordStatusAndPermissions
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>PasswordStatusAndPermissions</code>.
   * Contains the status and permissions over a password 
   * @alias module:model/PasswordStatusAndPermissions
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>PasswordStatusAndPermissions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PasswordStatusAndPermissions} obj Optional instance to populate.
   * @return {module:model/PasswordStatusAndPermissions} The populated <code>PasswordStatusAndPermissions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = PasswordType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = PasswordStatusEnum.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('permissions')) {
        obj['permissions'] = PasswordPermissions.constructFromObject(data['permissions']);
      }
    }
    return obj;
  }

  /**
   * The password type
   * @member {module:model/PasswordType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The password status Possible values are: * active: The password is active and valid * neverCreated: The password has never been created for the user * pending: The password was manually allowed (by admins) for the user to generate it, but it was not yet generated (never used for manual passwords) * disabled: The password has been manually disabled * reset: The password has been reset (can be used for login but must then be changed) * temporarilyBlocked: The password is temporarily blocked by exceeding the maximum attempts * indefinitelyBlocked: The password is blocked by exceeding the maximum attempts until it is manually unblocked * expired: The password is expired 
   * @member {module:model/PasswordStatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The date this status took place
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * The permissions over actions the authenticated user can perform on this password 
   * @member {module:model/PasswordPermissions} permissions
   */
  exports.prototype['permissions'] = undefined;



  return exports;
}));


