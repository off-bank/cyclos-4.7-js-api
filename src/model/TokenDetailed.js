/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Token', 'model/TokenStatusEnum', 'model/TokenType', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Token'), require('./TokenStatusEnum'), require('./TokenType'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.TokenDetailed = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.Token, root.Cyclos471Api.TokenStatusEnum, root.Cyclos471Api.TokenType, root.Cyclos471Api.User);
  }
}(this, function(ApiClient, Token, TokenStatusEnum, TokenType, User) {
  'use strict';




  /**
   * The TokenDetailed model module.
   * @module model/TokenDetailed
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>TokenDetailed</code>.
   * Contain all the information of a token. 
   * @alias module:model/TokenDetailed
   * @class
   * @implements module:model/Token
   */
  var exports = function() {
    var _this = this;

    Token.call(_this);





  };

  /**
   * Constructs a <code>TokenDetailed</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TokenDetailed} obj Optional instance to populate.
   * @return {module:model/TokenDetailed} The populated <code>TokenDetailed</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Token.constructFromObject(data, obj);
      if (data.hasOwnProperty('status')) {
        obj['status'] = TokenStatusEnum.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('user')) {
        obj['user'] = User.constructFromObject(data['user']);
      }
      if (data.hasOwnProperty('activationDate')) {
        obj['activationDate'] = ApiClient.convertToType(data['activationDate'], 'Date');
      }
      if (data.hasOwnProperty('creationDate')) {
        obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
      }
      if (data.hasOwnProperty('expiryDate')) {
        obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
      }
    }
    return obj;
  }

  /**
   * The possible statuses for a token Possible values are: * unassigned: The token is not assigned to an user. * pending: The token has been assigned to an user, but it's still pending for activation. * active: The token is active and can be used. * blocked: The token is blocked from being used. * canceled: The token is canceled and cannot be used. * activationExpired: The token has exceeded the activation deadline. * expired: The token has exceeded the expiration date. 
   * @member {module:model/TokenStatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The assigned user. Only if status is not `unassigned`.
   * @member {module:model/User} user
   */
  exports.prototype['user'] = undefined;
  /**
   * When the owner user activated the token. 
   * @member {Date} activationDate
   */
  exports.prototype['activationDate'] = undefined;
  /**
   * The creation date.
   * @member {Date} creationDate
   */
  exports.prototype['creationDate'] = undefined;
  /**
   * The expiration date. Only if the corresponding token type defines an expiration period.
   * @member {Date} expiryDate
   */
  exports.prototype['expiryDate'] = undefined;

  // Implement Token interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The entity name
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * The reference to the NFC token type
   * @member {module:model/TokenType} type
   */
exports.prototype['type'] = undefined;

  /**
   * The token value only if not NFC. Othwise the token's label.   
   * @member {String} value
   */
exports.prototype['value'] = undefined;



  return exports;
}));


