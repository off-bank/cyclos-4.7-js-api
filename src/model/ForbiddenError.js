/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ForbiddenErrorCode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ForbiddenErrorCode'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.ForbiddenError = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ForbiddenErrorCode);
  }
}(this, function(ApiClient, ForbiddenErrorCode) {
  'use strict';




  /**
   * The ForbiddenError model module.
   * @module model/ForbiddenError
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>ForbiddenError</code>.
   * Error returned when a HTTP status code 403 occurs
   * @alias module:model/ForbiddenError
   * @class
   */
  var exports = function() {
    var _this = this;


  };

  /**
   * Constructs a <code>ForbiddenError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ForbiddenError} obj Optional instance to populate.
   * @return {module:model/ForbiddenError} The populated <code>ForbiddenError</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('code')) {
        obj['code'] = ForbiddenErrorCode.constructFromObject(data['code']);
      }
    }
    return obj;
  }

  /**
   * Error codes for 403 Forbidden HTTP status.  Possible values are: * expiredPassword: The password being used has expired * illegalAction: Attempt to perform an action that is not allowed on this context * inaccessibleChannel: This channel cannot be accessed by the user  * invalidPassword: The password being used is invalid (normally the confirmation password) * operatorWithPendingAgreements: The operator cannot access because his owner member has pending agreements * permissionDenied: The operation was denied because a required permission was not granted * temporarilyBlocked: The password was temporarily blocked by exceeding the allowed attempts * indefinitelyBlocked: The password was indefinitely blocked by exceeding the allowed attempts  
   * @member {module:model/ForbiddenErrorCode} code
   */
  exports.prototype['code'] = undefined;



  return exports;
}));


