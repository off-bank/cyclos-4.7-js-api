/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClientStatusEnum', 'model/NamedEntity', 'model/PasswordInput'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ClientStatusEnum'), require('./NamedEntity'), require('./PasswordInput'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.ClientView = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ClientStatusEnum, root.Cyclos471Api.NamedEntity, root.Cyclos471Api.PasswordInput);
  }
}(this, function(ApiClient, ClientStatusEnum, NamedEntity, PasswordInput) {
  'use strict';




  /**
   * The ClientView model module.
   * @module model/ClientView
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>ClientView</code>.
   * Details on an access client
   * @alias module:model/ClientView
   * @class
   * @implements module:model/NamedEntity
   */
  var exports = function() {
    var _this = this;

    NamedEntity.call(_this);







  };

  /**
   * Constructs a <code>ClientView</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ClientView} obj Optional instance to populate.
   * @return {module:model/ClientView} The populated <code>ClientView</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      NamedEntity.constructFromObject(data, obj);
      if (data.hasOwnProperty('status')) {
        obj['status'] = ClientStatusEnum.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('activationDate')) {
        obj['activationDate'] = ApiClient.convertToType(data['activationDate'], 'Date');
      }
      if (data.hasOwnProperty('confirmationPasswordInput')) {
        obj['confirmationPasswordInput'] = PasswordInput.constructFromObject(data['confirmationPasswordInput']);
      }
      if (data.hasOwnProperty('canGetActivationCode')) {
        obj['canGetActivationCode'] = ApiClient.convertToType(data['canGetActivationCode'], 'Boolean');
      }
      if (data.hasOwnProperty('canUnassign')) {
        obj['canUnassign'] = ApiClient.convertToType(data['canUnassign'], 'Boolean');
      }
      if (data.hasOwnProperty('canBlock')) {
        obj['canBlock'] = ApiClient.convertToType(data['canBlock'], 'Boolean');
      }
      if (data.hasOwnProperty('canUnblock')) {
        obj['canUnblock'] = ApiClient.convertToType(data['canUnblock'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The status of an access client Possible values are: * unassigned: The access client is unassigned (disconnected) from an (remote) application * active: The access client is active, and can operate normally * blocked: The access client is blocked and cannot be used until it is unblocked * removed: The access client was removed, but had transactions, so couldn't be physically removed 
   * @member {module:model/ClientStatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The date the client was activated
   * @member {Date} activationDate
   */
  exports.prototype['activationDate'] = undefined;
  /**
   * Data for a confirmation password input in case of an action 
   * @member {module:model/PasswordInput} confirmationPasswordInput
   */
  exports.prototype['confirmationPasswordInput'] = undefined;
  /**
   * Can the authenticated user get the activation code, to later activate (assign) this client? 
   * @member {Boolean} canGetActivationCode
   */
  exports.prototype['canGetActivationCode'] = undefined;
  /**
   * Can the authenticated user unassign this client?
   * @member {Boolean} canUnassign
   */
  exports.prototype['canUnassign'] = undefined;
  /**
   * Can the authenticated user block this client?
   * @member {Boolean} canBlock
   */
  exports.prototype['canBlock'] = undefined;
  /**
   * Can the authenticated user unblock this client?
   * @member {Boolean} canUnblock
   */
  exports.prototype['canUnblock'] = undefined;

  // Implement NamedEntity interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The entity name
   * @member {String} name
   */
exports.prototype['name'] = undefined;



  return exports;
}));


