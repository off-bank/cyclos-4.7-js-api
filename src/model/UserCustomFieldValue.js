/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/CustomField', 'model/CustomFieldDynamicValue', 'model/CustomFieldPossibleValue', 'model/CustomFieldValue', 'model/EntityReference'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BigDecimal'), require('./CustomField'), require('./CustomFieldDynamicValue'), require('./CustomFieldPossibleValue'), require('./CustomFieldValue'), require('./EntityReference'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.UserCustomFieldValue = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.CustomField, root.Cyclos471Api.CustomFieldDynamicValue, root.Cyclos471Api.CustomFieldPossibleValue, root.Cyclos471Api.CustomFieldValue, root.Cyclos471Api.EntityReference);
  }
}(this, function(ApiClient, BigDecimal, CustomField, CustomFieldDynamicValue, CustomFieldPossibleValue, CustomFieldValue, EntityReference) {
  'use strict';




  /**
   * The UserCustomFieldValue model module.
   * @module model/UserCustomFieldValue
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>UserCustomFieldValue</code>.
   * Contains the custom field value information, plus the hidden flag 
   * @alias module:model/UserCustomFieldValue
   * @class
   * @implements module:model/CustomFieldValue
   */
  var exports = function() {
    var _this = this;

    CustomFieldValue.call(_this);

  };

  /**
   * Constructs a <code>UserCustomFieldValue</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserCustomFieldValue} obj Optional instance to populate.
   * @return {module:model/UserCustomFieldValue} The populated <code>UserCustomFieldValue</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      CustomFieldValue.constructFromObject(data, obj);
      if (data.hasOwnProperty('hidden')) {
        obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Whether this field is hidden for other users
   * @member {Boolean} hidden
   */
  exports.prototype['hidden'] = undefined;

  // Implement CustomFieldValue interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The custom field reference
   * @member {module:model/CustomField} field
   */
exports.prototype['field'] = undefined;

  /**
   * The field value if the field type is either `string`, `text`, `richText` or `url`. 
   * @member {String} stringValue
   */
exports.prototype['stringValue'] = undefined;

  /**
   * The field value if the field type is `date`. 
   * @member {Date} dateValue
   */
exports.prototype['dateValue'] = undefined;

  /**
   * The field value if the field type is `bool`. 
   * @member {Boolean} booleanValue
   */
exports.prototype['booleanValue'] = undefined;

  /**
   * The field value if the field type is `integer`. 
   * @member {Number} integerValue
   */
exports.prototype['integerValue'] = undefined;

  /**
   * The field value if the field type is `decimal`. 
   * @member {module:model/BigDecimal} decimalValue
   */
exports.prototype['decimalValue'] = undefined;

  /**
   * The field value if the field type is either `singleSelection` or `multiSelection`. For single selections will either be an empty array or an array with a single elemenet 
   * @member {Array.<module:model/CustomFieldPossibleValue>} enumeratedValues
   */
exports.prototype['enumeratedValues'] = undefined;

  /**
   * The field value if the field type is `linkedEntity`. 
   * @member {module:model/EntityReference} linkedEntityValue
   */
exports.prototype['linkedEntityValue'] = undefined;

  /**
   * The field value if the field type is `dynamicSelection`. 
   * @member {module:model/CustomFieldDynamicValue} dynamicValue
   */
exports.prototype['dynamicValue'] = undefined;



  return exports;
}));


