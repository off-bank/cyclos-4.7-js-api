/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/Entity', 'model/ScheduledPaymentInstallmentStatusEnum', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BigDecimal'), require('./Entity'), require('./ScheduledPaymentInstallmentStatusEnum'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.ScheduledPaymentInstallment = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.Entity, root.Cyclos471Api.ScheduledPaymentInstallmentStatusEnum, root.Cyclos471Api.User);
  }
}(this, function(ApiClient, BigDecimal, Entity, ScheduledPaymentInstallmentStatusEnum, User) {
  'use strict';




  /**
   * The ScheduledPaymentInstallment model module.
   * @module model/ScheduledPaymentInstallment
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>ScheduledPaymentInstallment</code>.
   * Contains details about an installment of a scheduled payment 
   * @alias module:model/ScheduledPaymentInstallment
   * @class
   * @implements module:model/Entity
   */
  var exports = function() {
    var _this = this;

    Entity.call(_this);







  };

  /**
   * Constructs a <code>ScheduledPaymentInstallment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ScheduledPaymentInstallment} obj Optional instance to populate.
   * @return {module:model/ScheduledPaymentInstallment} The populated <code>ScheduledPaymentInstallment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('number')) {
        obj['number'] = ApiClient.convertToType(data['number'], 'Number');
      }
      if (data.hasOwnProperty('dueDate')) {
        obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'Date');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], BigDecimal);
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ScheduledPaymentInstallmentStatusEnum.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('by')) {
        obj['by'] = User.constructFromObject(data['by']);
      }
      if (data.hasOwnProperty('transferId')) {
        obj['transferId'] = ApiClient.convertToType(data['transferId'], 'String');
      }
      if (data.hasOwnProperty('transferDate')) {
        obj['transferDate'] = ApiClient.convertToType(data['transferDate'], 'Date');
      }
    }
    return obj;
  }

  /**
   * The installment number.
   * @member {Number} number
   */
  exports.prototype['number'] = undefined;
  /**
   * The installment due date.
   * @member {Date} dueDate
   */
  exports.prototype['dueDate'] = undefined;
  /**
   * The installment amount
   * @member {module:model/BigDecimal} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * The status of a scheduled payment installment Possible values are: * scheduled: The installment is scheduled for a future date * processed: The installment was processed, generating a transfer * canceled: The installment was canceled * settled: The installment was marked as settled by the receiver * failed: The installment processing failed, for example, because there was no funds in the source account * blocked: The installment is blocked, and won't be automatically processed on its due date 
   * @member {module:model/ScheduledPaymentInstallmentStatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The user that performed an status change. For example, who manually paid, settled or canceled an open installment 
   * @member {module:model/User} by
   */
  exports.prototype['by'] = undefined;
  /**
   * Only if the installment was processed, contains the internal identifier of the generated transfer. 
   * @member {String} transferId
   */
  exports.prototype['transferId'] = undefined;
  /**
   * The date the transfer was processed.
   * @member {Date} transferDate
   */
  exports.prototype['transferDate'] = undefined;

  // Implement Entity interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;



  return exports;
}));


