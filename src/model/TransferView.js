/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountWithOwner', 'model/BigDecimal', 'model/Currency', 'model/EntityReference', 'model/PasswordInput', 'model/TransactionSubjectsEnum', 'model/TransactionView', 'model/Transfer', 'model/TransferStatus', 'model/TransferStatusFlowForTransferView'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountWithOwner'), require('./BigDecimal'), require('./Currency'), require('./EntityReference'), require('./PasswordInput'), require('./TransactionSubjectsEnum'), require('./TransactionView'), require('./Transfer'), require('./TransferStatus'), require('./TransferStatusFlowForTransferView'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.TransferView = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.AccountWithOwner, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.Currency, root.Cyclos471Api.EntityReference, root.Cyclos471Api.PasswordInput, root.Cyclos471Api.TransactionSubjectsEnum, root.Cyclos471Api.TransactionView, root.Cyclos471Api.Transfer, root.Cyclos471Api.TransferStatus, root.Cyclos471Api.TransferStatusFlowForTransferView);
  }
}(this, function(ApiClient, AccountWithOwner, BigDecimal, Currency, EntityReference, PasswordInput, TransactionSubjectsEnum, TransactionView, Transfer, TransferStatus, TransferStatusFlowForTransferView) {
  'use strict';




  /**
   * The TransferView model module.
   * @module model/TransferView
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>TransferView</code>.
   * Details about a balance transfer between accounts 
   * @alias module:model/TransferView
   * @class
   * @implements module:model/Transfer
   */
  var exports = function() {
    var _this = this;

    Transfer.call(_this);










  };

  /**
   * Constructs a <code>TransferView</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransferView} obj Optional instance to populate.
   * @return {module:model/TransferView} The populated <code>TransferView</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Transfer.constructFromObject(data, obj);
      if (data.hasOwnProperty('parent')) {
        obj['parent'] = Transfer.constructFromObject(data['parent']);
      }
      if (data.hasOwnProperty('children')) {
        obj['children'] = ApiClient.convertToType(data['children'], [Transfer]);
      }
      if (data.hasOwnProperty('transaction')) {
        obj['transaction'] = TransactionView.constructFromObject(data['transaction']);
      }
      if (data.hasOwnProperty('ARate')) {
        obj['ARate'] = ApiClient.convertToType(data['ARate'], BigDecimal);
      }
      if (data.hasOwnProperty('DRate')) {
        obj['DRate'] = ApiClient.convertToType(data['DRate'], BigDecimal);
      }
      if (data.hasOwnProperty('statusFlows')) {
        obj['statusFlows'] = ApiClient.convertToType(data['statusFlows'], [TransferStatusFlowForTransferView]);
      }
      if (data.hasOwnProperty('canChargeback')) {
        obj['canChargeback'] = ApiClient.convertToType(data['canChargeback'], 'Boolean');
      }
      if (data.hasOwnProperty('confirmationPasswordInput')) {
        obj['confirmationPasswordInput'] = PasswordInput.constructFromObject(data['confirmationPasswordInput']);
      }
      if (data.hasOwnProperty('usersWhichCanAddToContacts')) {
        obj['usersWhichCanAddToContacts'] = TransactionSubjectsEnum.constructFromObject(data['usersWhichCanAddToContacts']);
      }
      if (data.hasOwnProperty('usersWhichCanViewProfile')) {
        obj['usersWhichCanViewProfile'] = TransactionSubjectsEnum.constructFromObject(data['usersWhichCanViewProfile']);
      }
    }
    return obj;
  }

  /**
   * Reference to the parent transfer that generated this one, if any 
   * @member {module:model/Transfer} parent
   */
  exports.prototype['parent'] = undefined;
  /**
   * Reference to the transfers generated by this one, if any 
   * @member {Array.<module:model/Transfer>} children
   */
  exports.prototype['children'] = undefined;
  /**
   * If this balance transfer was originated from a transaction (like a payment or scheduled payment), contains the reference to this transaction. Only returned if this `TransferView` is not already in a `TransactionView`. 
   * @member {module:model/TransactionView} transaction
   */
  exports.prototype['transaction'] = undefined;
  /**
   * The balance aging counter
   * @member {module:model/BigDecimal} ARate
   */
  exports.prototype['ARate'] = undefined;
  /**
   * The balance maturity
   * @member {module:model/BigDecimal} DRate
   */
  exports.prototype['DRate'] = undefined;
  /**
   * List with each status this transfer has, with additional information, such as the flow and the log 
   * @member {Array.<module:model/TransferStatusFlowForTransferView>} statusFlows
   */
  exports.prototype['statusFlows'] = undefined;
  /**
   * Can the authenticated user chargeback this transfer? 
   * @member {Boolean} canChargeback
   */
  exports.prototype['canChargeback'] = undefined;
  /**
   * If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless). 
   * @member {module:model/PasswordInput} confirmationPasswordInput
   */
  exports.prototype['confirmationPasswordInput'] = undefined;
  /**
   * Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are: * none: Reference to none of the transaction subjects * from: Reference to the transaction from * to: Reference to the transaction to * both: Reference to both from and to subjects of the transaction 
   * @member {module:model/TransactionSubjectsEnum} usersWhichCanAddToContacts
   */
  exports.prototype['usersWhichCanAddToContacts'] = undefined;
  /**
   * Reference to none, one of (from or to) or both subjects of a transaction (or transfer)  Possible values are: * none: Reference to none of the transaction subjects * from: Reference to the transaction from * to: Reference to the transaction to * both: Reference to both from and to subjects of the transaction 
   * @member {module:model/TransactionSubjectsEnum} usersWhichCanViewProfile
   */
  exports.prototype['usersWhichCanViewProfile'] = undefined;

  // Implement Transfer interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The transfer date and time
   * @member {Date} date
   */
exports.prototype['date'] = undefined;

  /**
   * The transfer amount. May be positive or negative.
   * @member {module:model/BigDecimal} amount
   */
exports.prototype['amount'] = undefined;

  /**
   * The transfer type
   * @member {module:model/EntityReference} type
   */
exports.prototype['type'] = undefined;

  /**
   * The transfer currency
   * @member {module:model/Currency} currency
   */
exports.prototype['currency'] = undefined;

  /**
   * The account that sent the balance
   * @member {module:model/AccountWithOwner} from
   */
exports.prototype['from'] = undefined;

  /**
   * The account that received the balance
   * @member {module:model/AccountWithOwner} to
   */
exports.prototype['to'] = undefined;

  /**
   * The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have. 
   * @member {String} transactionNumber
   */
exports.prototype['transactionNumber'] = undefined;

  /**
   * Contains the current status for each status flow this transfer has 
   * @member {Array.<module:model/TransferStatus>} statuses
   */
exports.prototype['statuses'] = undefined;



  return exports;
}));


