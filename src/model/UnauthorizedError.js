/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PasswordStatusEnum', 'model/UnauthorizedErrorCode', 'model/UserStatusEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PasswordStatusEnum'), require('./UnauthorizedErrorCode'), require('./UserStatusEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.UnauthorizedError = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.PasswordStatusEnum, root.Cyclos471Api.UnauthorizedErrorCode, root.Cyclos471Api.UserStatusEnum);
  }
}(this, function(ApiClient, PasswordStatusEnum, UnauthorizedErrorCode, UserStatusEnum) {
  'use strict';




  /**
   * The UnauthorizedError model module.
   * @module model/UnauthorizedError
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>UnauthorizedError</code>.
   * Error returned when a HTTP status code 401 occurs
   * @alias module:model/UnauthorizedError
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>UnauthorizedError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UnauthorizedError} obj Optional instance to populate.
   * @return {module:model/UnauthorizedError} The populated <code>UnauthorizedError</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('code')) {
        obj['code'] = UnauthorizedErrorCode.constructFromObject(data['code']);
      }
      if (data.hasOwnProperty('userStatus')) {
        obj['userStatus'] = UserStatusEnum.constructFromObject(data['userStatus']);
      }
      if (data.hasOwnProperty('passwordStatus')) {
        obj['passwordStatus'] = PasswordStatusEnum.constructFromObject(data['passwordStatus']);
      }
    }
    return obj;
  }

  /**
   * Error codes for 401 Unauthorized HTTP status.  Possible values are: * missingAuthorization: Attempt to access an operation as guest, but the operation requires authentication * invalidAccessClient: The access client used for access is invalid * login: Either user identification (principal) or password are invalid. May have additional information, such as the user / password status * loggedOut: The session token used for access is invalid * remoteAddressBlocked: The IP address being used for access has been blocked by exceeding tries with invalid users * unauthorizedAddress: The user cannot access the system using an IP address that is not white-listed * unauthorizedUrl: The user's configuration demands access using a specific URL, and this access is being done using another one * invalidChannelUsage: Attempt to login on a stateless-only channel, or use stateless in a stateful-only channel, or invoke as guest in a channel configuration which is only for users * invalidNetwork: Attempt to access a network that has been disabled 
   * @member {module:model/UnauthorizedErrorCode} code
   */
  exports.prototype['code'] = undefined;
  /**
   * May only returned when `code` is `login`. Possible values are: * active: The user is active and can use the system normally. * blocked: The user has been blocked from accessing the system. Other users still see him/her. * disabled: The user has been disabled - he/she cannot access the system and is invisible by other users. * removed: The user was permanently removed. It's profile is kept for historical purposes. * pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users. 
   * @member {module:model/UserStatusEnum} userStatus
   */
  exports.prototype['userStatus'] = undefined;
  /**
   * May only returned when `code` is `login`.  Possible values are: * active: The password is active and valid * neverCreated: The password has never been created for the user * pending: The password was manually allowed (by admins) for the user to generate it, but it was not yet generated (never used for manual passwords) * disabled: The password has been manually disabled * reset: The password has been reset (can be used for login but must then be changed) * temporarilyBlocked: The password is temporarily blocked by exceeding the maximum attempts * indefinitelyBlocked: The password is blocked by exceeding the maximum attempts until it is manually unblocked * expired: The password is expired 
   * @member {module:model/PasswordStatusEnum} passwordStatus
   */
  exports.prototype['passwordStatus'] = undefined;



  return exports;
}));


