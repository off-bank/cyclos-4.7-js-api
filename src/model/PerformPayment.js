/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/PaymentSchedulingEnum', 'model/PerformInternalTransaction', 'model/PerformScheduledPaymentInstallment', 'model/TimeInterval'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BigDecimal'), require('./PaymentSchedulingEnum'), require('./PerformInternalTransaction'), require('./PerformScheduledPaymentInstallment'), require('./TimeInterval'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.PerformPayment = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.PaymentSchedulingEnum, root.Cyclos471Api.PerformInternalTransaction, root.Cyclos471Api.PerformScheduledPaymentInstallment, root.Cyclos471Api.TimeInterval);
  }
}(this, function(ApiClient, BigDecimal, PaymentSchedulingEnum, PerformInternalTransaction, PerformScheduledPaymentInstallment, TimeInterval) {
  'use strict';




  /**
   * The PerformPayment model module.
   * @module model/PerformPayment
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>PerformPayment</code>.
   * Definitions used to perform either a direct, scheduled or recurring payment. Regarding scheduling, the &#x60;scheduling&#x60; field must be set if some scheduling option (other than direct payment) is desired. The scheduling possibilities are: - Direct payment: For a direct payment, leave empty the &#x60;scheduling&#x60; field   or set it to &#x60;direct&#x60;; - Single future payment: For a payment scheduled to a future date, set the   &#x60;scheduling&#x60; field to &#x60;scheduled&#x60; and set the    &#x60;firstDueDate&#x60; property with the desired due date; - Multiple installments, being the first immediately and the rest with   regular 1 month interval in-between: For this, set the &#x60;scheduling&#x60; field   to &#x60;scheduled&#x60; and the &#x60;installmentsCount&#x60;   to a value greater than 1; - Multiple installments, starting at a specific date, with other   installments with regular 1 month interval in-between: For this, set the   &#x60;scheduling&#x60; field to &#x60;scheduled&#x60;, the   &#x60;installmentsCount&#x60; to a value greater than 1 and the   &#x60;firstInstallmentDate&#x60; with a future date; - Custom installments: For a full control on the generated installments,    set the &#x60;scheduling&#x60; field to &#x60;scheduled&#x60;    and pass in the &#x60;installments&#x60; array. However, there are some rules:   - The total amount must be equals the sum of all installment amounts;   - The first due date must be in the future;   - The due dates of all installments must be in crescent order;   - There must be at least one day between distinct due dates.   - Recurring payment with the first payment immediately, the others at   fixed future dates: This can be achieved by setting the &#x60;scheduling&#x60;   field to &#x60;recurring&#x60; and leaving blank the   &#x60;firstOccurrenceDate&#x60;. It is possible to schedule a limited number of   occurrences, by setting &#x60;occurrencesCount&#x60;, or until it is manually   canceled, by leaving &#x60;occurrencesCount&#x60; empty. Also, it is possible to   customize the interval (default is 1 month) between each occurrence, by   setting the &#x60;occurrenceInterval&#x60; field. - Recurring payment starting in a future date: This can be achieved by   setting the &#x60;scheduling&#x60; field to &#x60;recurring&#x60;   and setting the &#x60;firstOccurrenceDate&#x60;. The other options, the fixed   number of occurrences (&#x60;occurrencesCount&#x60;) and interval between each   occurrence  (&#x60;occurrenceInterval&#x60;) can be set just like the case above. 
   * @alias module:model/PerformPayment
   * @class
   * @implements module:model/PerformInternalTransaction
   */
  var exports = function() {
    var _this = this;

    PerformInternalTransaction.call(_this);







  };

  /**
   * Constructs a <code>PerformPayment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PerformPayment} obj Optional instance to populate.
   * @return {module:model/PerformPayment} The populated <code>PerformPayment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      PerformInternalTransaction.constructFromObject(data, obj);
      if (data.hasOwnProperty('scheduling')) {
        obj['scheduling'] = PaymentSchedulingEnum.constructFromObject(data['scheduling']);
      }
      if (data.hasOwnProperty('installmentsCount')) {
        obj['installmentsCount'] = ApiClient.convertToType(data['installmentsCount'], 'Number');
      }
      if (data.hasOwnProperty('firstInstallmentDate')) {
        obj['firstInstallmentDate'] = ApiClient.convertToType(data['firstInstallmentDate'], 'Date');
      }
      if (data.hasOwnProperty('installments')) {
        obj['installments'] = ApiClient.convertToType(data['installments'], [PerformScheduledPaymentInstallment]);
      }
      if (data.hasOwnProperty('occurrencesCount')) {
        obj['occurrencesCount'] = ApiClient.convertToType(data['occurrencesCount'], 'Number');
      }
      if (data.hasOwnProperty('firstOccurrenceDate')) {
        obj['firstOccurrenceDate'] = ApiClient.convertToType(data['firstOccurrenceDate'], 'Date');
      }
      if (data.hasOwnProperty('occurrenceInterval')) {
        obj['occurrenceInterval'] = TimeInterval.constructFromObject(data['occurrenceInterval']);
      }
    }
    return obj;
  }

  /**
   * Determines how a payment is scheduled. When not specified, direct payments are performed. Possible values are: * direct: The payment won't be scheduled, but paid directly * scheduled: The payment will be scheduled, either to a single future date or multiple installments * recurring: The payment will be recurring, repeated either by a limited number of occurrences or until cancel 
   * @member {module:model/PaymentSchedulingEnum} scheduling
   */
  exports.prototype['scheduling'] = undefined;
  /**
   * Represents the number of installments. When not specified, assumes a single installment. Used only if `scheduling` is `scheduled`. Can be used together with `installmentsCount` as an alternative to providing individual `installments` definitions. 
   * @member {Number} installmentsCount
   */
  exports.prototype['installmentsCount'] = undefined;
  /**
   * Represents the first installment date. When not specified, assumes the first installment is processed instantly. Used only if `scheduling` is `scheduled`. Can be used together with `installmentsCount` as an alternative to providing individual `installments` definitions. 
   * @member {Date} firstInstallmentDate
   */
  exports.prototype['firstInstallmentDate'] = undefined;
  /**
   * An array containing individual installments definitions, allowing full control over generated installments. Used only if `scheduling` is `scheduled`. 
   * @member {Array.<module:model/PerformScheduledPaymentInstallment>} installments
   */
  exports.prototype['installments'] = undefined;
  /**
   * Represents the number of occurrences in a recurring payment. When not provided, the payment will be repeated until it is manually canceled. Used only if `scheduling` is `recurring`. 
   * @member {Number} occurrencesCount
   */
  exports.prototype['occurrencesCount'] = undefined;
  /**
   * Represents the first occurrence date for a recurring payment. If none is given, it is assumed that the first occurrence is immediate. Used only if `scheduling` is `recurring`. 
   * @member {Date} firstOccurrenceDate
   */
  exports.prototype['firstOccurrenceDate'] = undefined;
  /**
   * Defines the interval between payment occurrences. If none is given, it is assumed 1 month between occurrences. Used only if `scheduling` is `recurring`. 
   * @member {module:model/TimeInterval} occurrenceInterval
   */
  exports.prototype['occurrenceInterval'] = undefined;

  // Implement PerformInternalTransaction interface:
  /**
   * The payment destination (in case of perform payment) or payer (in case of receive payment). Either an user principal (id, login name,  etc) or the word `system` when the payment is to be performed to / from a system account.  
   * @member {String} subject
   */
exports.prototype['subject'] = undefined;

  /**
   * The transaction amount
   * @member {module:model/BigDecimal} amount
   */
exports.prototype['amount'] = undefined;

  /**
   * The (optional) transaction description
   * @member {String} description
   */
exports.prototype['description'] = undefined;

  /**
   * The currency id or internal name. Only used when not specifying a payment type. In this case, will narrow the search for the it. 
   * @member {String} currency
   */
exports.prototype['currency'] = undefined;

  /**
   * The payment type, either the id or qualified internal name (in the form `fromAccountType.paymentType`). If no payment type is specified, if a single one is possible, it will be used. If a currency is specified, it will be taken into account in order to find the payment type. If, however, there would be multiple possibilities, a validation error is returned. 
   * @member {String} type
   */
exports.prototype['type'] = undefined;

  /**
   * Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. 
   * @member {Object.<String, String>} customValues
   */
exports.prototype['customValues'] = undefined;

  /**
   * If this transacction is used with a NFC token, must be the challenge (as returned by the server) encrypted by the NFC chip, encoded in HEX form (2 hex chars per byte). 
   * @member {String} nfcChallence
   */
exports.prototype['nfcChallence'] = undefined;

  /**
   * If the payment type allows setting a custom name for the origin account, is its name. If not allowed, is ignored. For example, integration with other systems could use 'Bank account [IBAN]'. 
   * @member {String} fromName
   */
exports.prototype['fromName'] = undefined;

  /**
   * If the payment type allows setting a custom name for the destination account, is its name. If not allowed, is ignored. For example, integration with other systems could use 'Bank account [IBAN]'. 
   * @member {String} toName
   */
exports.prototype['toName'] = undefined;



  return exports;
}));


