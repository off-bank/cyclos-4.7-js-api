/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountWithOwner', 'model/BigDecimal', 'model/Currency', 'model/Entity', 'model/EntityReference', 'model/TransferStatus'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountWithOwner'), require('./BigDecimal'), require('./Currency'), require('./Entity'), require('./EntityReference'), require('./TransferStatus'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.Transfer = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.AccountWithOwner, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.Currency, root.Cyclos471Api.Entity, root.Cyclos471Api.EntityReference, root.Cyclos471Api.TransferStatus);
  }
}(this, function(ApiClient, AccountWithOwner, BigDecimal, Currency, Entity, EntityReference, TransferStatus) {
  'use strict';




  /**
   * The Transfer model module.
   * @module model/Transfer
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>Transfer</code>.
   * Reference to a balance transfer between accounts 
   * @alias module:model/Transfer
   * @class
   * @implements module:model/Entity
   */
  var exports = function() {
    var _this = this;

    Entity.call(_this);








  };

  /**
   * Constructs a <code>Transfer</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Transfer} obj Optional instance to populate.
   * @return {module:model/Transfer} The populated <code>Transfer</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], BigDecimal);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = EntityReference.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = Currency.constructFromObject(data['currency']);
      }
      if (data.hasOwnProperty('from')) {
        obj['from'] = AccountWithOwner.constructFromObject(data['from']);
      }
      if (data.hasOwnProperty('to')) {
        obj['to'] = AccountWithOwner.constructFromObject(data['to']);
      }
      if (data.hasOwnProperty('transactionNumber')) {
        obj['transactionNumber'] = ApiClient.convertToType(data['transactionNumber'], 'String');
      }
      if (data.hasOwnProperty('statuses')) {
        obj['statuses'] = ApiClient.convertToType(data['statuses'], [TransferStatus]);
      }
    }
    return obj;
  }

  /**
   * The transfer date and time
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * The transfer amount. May be positive or negative.
   * @member {module:model/BigDecimal} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * The transfer type
   * @member {module:model/EntityReference} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The transfer currency
   * @member {module:model/Currency} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * The account that sent the balance
   * @member {module:model/AccountWithOwner} from
   */
  exports.prototype['from'] = undefined;
  /**
   * The account that received the balance
   * @member {module:model/AccountWithOwner} to
   */
  exports.prototype['to'] = undefined;
  /**
   * The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have. 
   * @member {String} transactionNumber
   */
  exports.prototype['transactionNumber'] = undefined;
  /**
   * Contains the current status for each status flow this transfer has 
   * @member {Array.<module:model/TransferStatus>} statuses
   */
  exports.prototype['statuses'] = undefined;

  // Implement Entity interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;



  return exports;
}));


