/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountWithOwner', 'model/BigDecimal', 'model/Entity', 'model/EntityReference', 'model/Transaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountWithOwner'), require('./BigDecimal'), require('./Entity'), require('./EntityReference'), require('./Transaction'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.AccountHistoryResult = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.AccountWithOwner, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.Entity, root.Cyclos471Api.EntityReference, root.Cyclos471Api.Transaction);
  }
}(this, function(ApiClient, AccountWithOwner, BigDecimal, Entity, EntityReference, Transaction) {
  'use strict';




  /**
   * The AccountHistoryResult model module.
   * @module model/AccountHistoryResult
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>AccountHistoryResult</code>.
   * Represents a balance transfer between accounts, as viewed from the point-of-view account of a a specific account. This means that credits will have a positive amount, while debits will be negative. 
   * @alias module:model/AccountHistoryResult
   * @class
   * @implements module:model/Entity
   */
  var exports = function() {
    var _this = this;

    Entity.call(_this);









  };

  /**
   * Constructs a <code>AccountHistoryResult</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountHistoryResult} obj Optional instance to populate.
   * @return {module:model/AccountHistoryResult} The populated <code>AccountHistoryResult</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], BigDecimal);
      }
      if (data.hasOwnProperty('relatedAccount')) {
        obj['relatedAccount'] = AccountWithOwner.constructFromObject(data['relatedAccount']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = EntityReference.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('transactionNumber')) {
        obj['transactionNumber'] = ApiClient.convertToType(data['transactionNumber'], 'String');
      }
      if (data.hasOwnProperty('customValues')) {
        obj['customValues'] = ApiClient.convertToType(data['customValues'], {'String': 'String'});
      }
      if (data.hasOwnProperty('transaction')) {
        obj['transaction'] = Transaction.constructFromObject(data['transaction']);
      }
      if (data.hasOwnProperty('statuses')) {
        obj['statuses'] = ApiClient.convertToType(data['statuses'], {'String': 'String'});
      }
    }
    return obj;
  }

  /**
   * The transfer date and time
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * The transfer amount. May be positive or negative.
   * @member {module:model/BigDecimal} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * The account that either received / sent the balance
   * @member {module:model/AccountWithOwner} relatedAccount
   */
  exports.prototype['relatedAccount'] = undefined;
  /**
   * The transfer type
   * @member {module:model/EntityReference} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The transaction description. Is optional.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have. 
   * @member {String} transactionNumber
   */
  exports.prototype['transactionNumber'] = undefined;
  /**
   * Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use the `GET /{owner}/accounts/{accountType}/data-for-history` operation, and lookup each field by either internal name (if configured) or id. Example: `{..., \"customValues\": {\"linkedAccount\": \"123456789\"}}` 
   * @member {Object.<String, String>} customValues
   */
  exports.prototype['customValues'] = undefined;
  /**
   * If this balance transfer was originated from a transaction (like a payment or scheduled payment), contains the reference to this transaction. 
   * @member {module:model/Transaction} transaction
   */
  exports.prototype['transaction'] = undefined;
  /**
   * contains the current status internal name or id, keyed by the flow internal name or id 
   * @member {Object.<String, String>} statuses
   */
  exports.prototype['statuses'] = undefined;

  // Implement Entity interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;



  return exports;
}));


