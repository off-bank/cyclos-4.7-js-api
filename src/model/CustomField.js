/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CustomFieldControlEnum', 'model/CustomFieldTypeEnum', 'model/InternalNamedEntity', 'model/LinkedEntityTypeEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CustomFieldControlEnum'), require('./CustomFieldTypeEnum'), require('./InternalNamedEntity'), require('./LinkedEntityTypeEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.CustomField = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.CustomFieldControlEnum, root.Cyclos471Api.CustomFieldTypeEnum, root.Cyclos471Api.InternalNamedEntity, root.Cyclos471Api.LinkedEntityTypeEnum);
  }
}(this, function(ApiClient, CustomFieldControlEnum, CustomFieldTypeEnum, InternalNamedEntity, LinkedEntityTypeEnum) {
  'use strict';




  /**
   * The CustomField model module.
   * @module model/CustomField
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>CustomField</code>.
   * Contains reference to a custom field 
   * @alias module:model/CustomField
   * @class
   * @implements module:model/InternalNamedEntity
   */
  var exports = function() {
    var _this = this;

    InternalNamedEntity.call(_this);



  };

  /**
   * Constructs a <code>CustomField</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CustomField} obj Optional instance to populate.
   * @return {module:model/CustomField} The populated <code>CustomField</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      InternalNamedEntity.constructFromObject(data, obj);
      if (data.hasOwnProperty('type')) {
        obj['type'] = CustomFieldTypeEnum.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('linkedEntityType')) {
        obj['linkedEntityType'] = LinkedEntityTypeEnum.constructFromObject(data['linkedEntityType']);
      }
      if (data.hasOwnProperty('control')) {
        obj['control'] = CustomFieldControlEnum.constructFromObject(data['control']);
      }
    }
    return obj;
  }

  /**
   * The data type for the custom field Possible values are: * string: A single line string * text: A multi line string * richText: A multi line string formatted as HTML * singleSelection: A single enumerated value * multiSelection: Multiple enumerated values * dynamicSelection: Single selection based on options generated by a custom script * integer: An integer value * decimal: A decimal value * date: A date value * boolean: A boolean value * url: An URL * linkedEntity: Another entity. Uses the `linkedEntityType` to define which kind of entity is it 
   * @member {module:model/CustomFieldTypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * When the type is linkedEntity, indicates the entity type Possible values are: * user: An user * transaction: A transaction (payment, scheduled payment, payment request, etc) * transfer: A transfer * record: A record (user or system) * advertisement: An advertisement 
   * @member {module:model/LinkedEntityTypeEnum} linkedEntityType
   */
  exports.prototype['linkedEntityType'] = undefined;
  /**
   * The UI control (widget) type that should be used to render this field for edit. Most notably, the types that can have distinct controls are singleSelection, that could be rendered as a single selection widget or radio button group, and multi selection, which could be rendered as a multi selection widget or a checkbox group. Possible values are: * text: A single line text * textarea: A multi line text * richEditor: An HTML editor * singleSelection: A single-selection field * radio: A radio button group * multiSelection: A multi-selection field * checkbox: A checkbox group * entitySelection: A widget to select a linked entity (for example, an auto-complete for users) 
   * @member {module:model/CustomFieldControlEnum} control
   */
  exports.prototype['control'] = undefined;

  // Implement InternalNamedEntity interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * The entity name
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * The entity internal name, which can be seen as an extra identifier 
   * @member {String} internalName
   */
exports.prototype['internalName'] = undefined;



  return exports;
}));


