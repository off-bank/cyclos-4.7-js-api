/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.PasswordPermissions = factory(root.Cyclos471Api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The PasswordPermissions model module.
   * @module model/PasswordPermissions
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>PasswordPermissions</code>.
   * The permissions the authenticated user can perform over this password 
   * @alias module:model/PasswordPermissions
   * @class
   */
  var exports = function() {
    var _this = this;









  };

  /**
   * Constructs a <code>PasswordPermissions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PasswordPermissions} obj Optional instance to populate.
   * @return {module:model/PasswordPermissions} The populated <code>PasswordPermissions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('change')) {
        obj['change'] = ApiClient.convertToType(data['change'], 'Boolean');
      }
      if (data.hasOwnProperty('generate')) {
        obj['generate'] = ApiClient.convertToType(data['generate'], 'Boolean');
      }
      if (data.hasOwnProperty('allowGeneration')) {
        obj['allowGeneration'] = ApiClient.convertToType(data['allowGeneration'], 'Boolean');
      }
      if (data.hasOwnProperty('disable')) {
        obj['disable'] = ApiClient.convertToType(data['disable'], 'Boolean');
      }
      if (data.hasOwnProperty('enable')) {
        obj['enable'] = ApiClient.convertToType(data['enable'], 'Boolean');
      }
      if (data.hasOwnProperty('reset')) {
        obj['reset'] = ApiClient.convertToType(data['reset'], 'Boolean');
      }
      if (data.hasOwnProperty('resetAndSend')) {
        obj['resetAndSend'] = ApiClient.convertToType(data['resetAndSend'], 'Boolean');
      }
      if (data.hasOwnProperty('unblock')) {
        obj['unblock'] = ApiClient.convertToType(data['unblock'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Manually change a generated password or generate another value for a generated password. 
   * @member {Boolean} change
   */
  exports.prototype['change'] = undefined;
  /**
   * Generate the password value for the first time. Can only be done for the authenticated user himself. 
   * @member {Boolean} generate
   */
  exports.prototype['generate'] = undefined;
  /**
   * For generated passwords that have a setting to require administration authorization, this action is the one that allows the user to generate the password value. 
   * @member {Boolean} allowGeneration
   */
  exports.prototype['allowGeneration'] = undefined;
  /**
   * Disables a password, making it unusable until being enabled again 
   * @member {Boolean} disable
   */
  exports.prototype['disable'] = undefined;
  /**
   * Enables a disabled password, either manually disabled or by exceeding the wrong tries, depending on the password type configuration. 
   * @member {Boolean} enable
   */
  exports.prototype['enable'] = undefined;
  /**
   * Resets a generated password, making it go back to the pending state. The user will then be able to generate a new value for it. 
   * @member {Boolean} reset
   */
  exports.prototype['reset'] = undefined;
  /**
   * Resets a manual password to a generated value and send it to the user. Can also be used to reset and send the main channel's access password if it is generated. The new password is initially expired, so the user needs to change it on first login. 
   * @member {Boolean} resetAndSend
   */
  exports.prototype['resetAndSend'] = undefined;
  /**
   * Unblocks a password which has been blocked by exceeding the wrong tries 
   * @member {Boolean} unblock
   */
  exports.prototype['unblock'] = undefined;



  return exports;
}));


