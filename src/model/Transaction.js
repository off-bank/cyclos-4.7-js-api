/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountKind', 'model/AuthorizationStatusEnum', 'model/BigDecimal', 'model/Currency', 'model/Entity', 'model/TransactionKind', 'model/TransferType', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountKind'), require('./AuthorizationStatusEnum'), require('./BigDecimal'), require('./Currency'), require('./Entity'), require('./TransactionKind'), require('./TransferType'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.Transaction = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.AccountKind, root.Cyclos471Api.AuthorizationStatusEnum, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.Currency, root.Cyclos471Api.Entity, root.Cyclos471Api.TransactionKind, root.Cyclos471Api.TransferType, root.Cyclos471Api.User);
  }
}(this, function(ApiClient, AccountKind, AuthorizationStatusEnum, BigDecimal, Currency, Entity, TransactionKind, TransferType, User) {
  'use strict';




  /**
   * The Transaction model module.
   * @module model/Transaction
   * @version 4.7.1
   */

  /**
   * Constructs a new <code>Transaction</code>.
   * Reference to a transaction
   * @alias module:model/Transaction
   * @class
   * @implements module:model/Entity
   */
  var exports = function() {
    var _this = this;

    Entity.call(_this);












  };

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Transaction} obj Optional instance to populate.
   * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Entity.constructFromObject(data, obj);
      if (data.hasOwnProperty('transactionNumber')) {
        obj['transactionNumber'] = ApiClient.convertToType(data['transactionNumber'], 'String');
      }
      if (data.hasOwnProperty('kind')) {
        obj['kind'] = TransactionKind.constructFromObject(data['kind']);
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], BigDecimal);
      }
      if (data.hasOwnProperty('fromKind')) {
        obj['fromKind'] = AccountKind.constructFromObject(data['fromKind']);
      }
      if (data.hasOwnProperty('fromUser')) {
        obj['fromUser'] = User.constructFromObject(data['fromUser']);
      }
      if (data.hasOwnProperty('toKind')) {
        obj['toKind'] = AccountKind.constructFromObject(data['toKind']);
      }
      if (data.hasOwnProperty('toUser')) {
        obj['toUser'] = User.constructFromObject(data['toUser']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = TransferType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = Currency.constructFromObject(data['currency']);
      }
      if (data.hasOwnProperty('authorizationStatus')) {
        obj['authorizationStatus'] = AuthorizationStatusEnum.constructFromObject(data['authorizationStatus']);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
    }
    return obj;
  }

  /**
   * The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have. 
   * @member {String} transactionNumber
   */
  exports.prototype['transactionNumber'] = undefined;
  /**
   * The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view. Possible values are: * payment: A direct payment * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * paymentRequest: A request for another user to accept a payment  * externalPayment: A payment to an external user * chargeback: Chargeback of a given transfer * import: An imported transaction * order: Transaction generated by confirming an order 
   * @member {module:model/TransactionKind} kind
   */
  exports.prototype['kind'] = undefined;
  /**
   * The transfer date and time
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * The transfer amount. May be positive or negative.
   * @member {module:model/BigDecimal} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * The from account kind
   * @member {module:model/AccountKind} fromKind
   */
  exports.prototype['fromKind'] = undefined;
  /**
   * The user that performed this transaction. Is only returned if `fromKind` is `user`. 
   * @member {module:model/User} fromUser
   */
  exports.prototype['fromUser'] = undefined;
  /**
   * The to account kind
   * @member {module:model/AccountKind} toKind
   */
  exports.prototype['toKind'] = undefined;
  /**
   * The user that performed this transaction. Is only returned if `toKind` is `user`. 
   * @member {module:model/User} toUser
   */
  exports.prototype['toUser'] = undefined;
  /**
   * The transaction type
   * @member {module:model/TransferType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The transaction currency. Is only returned if this object is not embedded in a `TransferView`. 
   * @member {module:model/Currency} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * The status regarding authorization a transaction is in. If configured, transactions can require one or more levels of authorization in order to be processed. If a transaction has the this status null, it means it never went through the authorization process.  Possible values are: * pending: The transaction is pending authorization * canceled: The authorization submission was canceled by the submitter * denied: The authorization was denied * authorized: The transaction was fully authorized and is processed 
   * @member {module:model/AuthorizationStatusEnum} authorizationStatus
   */
  exports.prototype['authorizationStatus'] = undefined;
  /**
   * The transaction description. Is optional.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;

  // Implement Entity interface:
  /**
   * Entity identifier
   * @member {String} id
   */
exports.prototype['id'] = undefined;



  return exports;
}));


