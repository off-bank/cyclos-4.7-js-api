/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/DataForTransaction', 'model/ForbiddenError', 'model/InputError', 'model/NotFoundError', 'model/OtpError', 'model/PaymentError', 'model/PaymentPreview', 'model/PerformPayment', 'model/PerformScheduledPaymentInstallment', 'model/PosError', 'model/Transaction', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BigDecimal'), require('../model/DataForTransaction'), require('../model/ForbiddenError'), require('../model/InputError'), require('../model/NotFoundError'), require('../model/OtpError'), require('../model/PaymentError'), require('../model/PaymentPreview'), require('../model/PerformPayment'), require('../model/PerformScheduledPaymentInstallment'), require('../model/PosError'), require('../model/Transaction'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.POSApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.DataForTransaction, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.InputError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.OtpError, root.Cyclos471Api.PaymentError, root.Cyclos471Api.PaymentPreview, root.Cyclos471Api.PerformPayment, root.Cyclos471Api.PerformScheduledPaymentInstallment, root.Cyclos471Api.PosError, root.Cyclos471Api.Transaction, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, BigDecimal, DataForTransaction, ForbiddenError, InputError, NotFoundError, OtpError, PaymentError, PaymentPreview, PerformPayment, PerformScheduledPaymentInstallment, PosError, Transaction, UnauthorizedError) {
  'use strict';

  /**
   * POS service.
   * @module api/POSApi
   * @version 4.7.1
   */

  /**
   * Constructs a new POSApi. 
   * @alias module:api/POSApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the calculateReceivePaymentInstallments operation.
     * @callback module:api/POSApi~calculateReceivePaymentInstallmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PerformScheduledPaymentInstallment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculates the default installments for a scheduled payment
     * Used to calculate installments for a scheduled payment. Will return an installment every month. When later receiving the payment, these can be (optionally) customized (such as changing some due dates or amounts) and used on the payment installments.    
     * @param {String} from The payment origin
     * @param {Number} count The number of installments
     * @param {module:model/BigDecimal} amount The total scheduled payment amount
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {String} opts.currency The payment currency. Used when no &#x60;type&#x60; is not provided, to narrow the possible payment types by currency. 
     * @param {String} opts.type The payment type id or qualified internal name (in the form  &#x60;fromAccountType.paymentType&#x60;). If not provided, will use the first possible type (possibly narrowed by the &#x60;currency&#x60; parameter). However, if more than one type is available, a validation error will be raised. 
     * @param {Date} opts.firstDate The due date of the first installment. If none is provided, it is assumed that the first installment is paid immediately, and others will be with regular 1 month interval 
     * @param {module:api/POSApi~calculateReceivePaymentInstallmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PerformScheduledPaymentInstallment>}
     */
    this.calculateReceivePaymentInstallments = function(from, count, amount, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from == undefined || from == null) {
        throw new Error("Missing the required parameter 'from' when calling calculateReceivePaymentInstallments");
      }

      // verify the required parameter 'count' is set
      if (count == undefined || count == null) {
        throw new Error("Missing the required parameter 'count' when calling calculateReceivePaymentInstallments");
      }

      // verify the required parameter 'amount' is set
      if (amount == undefined || amount == null) {
        throw new Error("Missing the required parameter 'amount' when calling calculateReceivePaymentInstallments");
      }


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'from': from,
        'count': count,
        'amount': amount,
        'currency': opts['currency'],
        'type': opts['type'],
        'firstDate': opts['firstDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PerformScheduledPaymentInstallment];

      return this.apiClient.callApi(
        '/pos/installments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataForReceivePayment operation.
     * @callback module:api/POSApi~dataForReceivePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration data for receiving a payment (POS)
     * Returns configuration data for receiving a payment in POS operation  
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {String} opts.from Identification of the payer user
     * @param {String} opts.type The payment type id or qualified internal name (in the form &#x60;fromAccountType.paymentType&#x60;). If no payment type is provided, the possible types will be returned, so the payer can choose. 
     * @param {module:api/POSApi~dataForReceivePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForTransaction}
     */
    this.dataForReceivePayment = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'from': opts['from'],
        'type': opts['type']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForTransaction;

      return this.apiClient.callApi(
        '/pos/data-for-pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the previewReceivePayment operation.
     * @callback module:api/POSApi~previewReceivePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentPreview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Previews a POS payment before receiving it
     * Previews a payment or scheduled payment. The actual balance checking is not performed in the preview.  
     * @param {module:model/PerformPayment} payment The receive payment parameters
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/POSApi~previewReceivePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentPreview}
     */
    this.previewReceivePayment = function(payment, opts, callback) {
      opts = opts || {};
      var postBody = payment;

      // verify the required parameter 'payment' is set
      if (payment == undefined || payment == null) {
        throw new Error("Missing the required parameter 'payment' when calling previewReceivePayment");
      }


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PaymentPreview;

      return this.apiClient.callApi(
        '/pos/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the receivePayment operation.
     * @callback module:api/POSApi~receivePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receives a payment (POS)
     * Receives either a direct or scheduled payment in a POS operation for the authenticated user. The payer user should be informed in the &#x60;subject&#x60; parameter. The payment id is returned on the response, and a link to the transaction details is returned on the &#x60;Location&#x60; header. 
     * @param {module:model/PerformPayment} payment The receive payment parameters
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {String} opts.confirmationPassword The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
     * @param {module:api/POSApi~receivePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    this.receivePayment = function(payment, opts, callback) {
      opts = opts || {};
      var postBody = payment;

      // verify the required parameter 'payment' is set
      if (payment == undefined || payment == null) {
        throw new Error("Missing the required parameter 'payment' when calling receivePayment");
      }


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
        'confirmationPassword': opts['confirmationPassword']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Transaction;

      return this.apiClient.callApi(
        '/pos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the receivePaymentOtp operation.
     * @callback module:api/POSApi~receivePaymentOtpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new One-Time-Password (OTP) for a pos payment
     * Sends a new OTP for the customer of the POS for a payment. The OTP belongs to the payer, not the authenticated user. The entire payment object must be sent on the request body. This is the same object which is sent both either preview or actually receive the payment.  
     * @param {module:model/String} medium The medium the user wants to receive the otp Possible values are: * email: The user will receive an email with the information * sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms) 
     * @param {module:model/PerformPayment} payment The receive payment parameters
     * @param {module:api/POSApi~receivePaymentOtpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.receivePaymentOtp = function(medium, payment, callback) {
      var postBody = payment;

      // verify the required parameter 'medium' is set
      if (medium == undefined || medium == null) {
        throw new Error("Missing the required parameter 'medium' when calling receivePaymentOtp");
      }

      // verify the required parameter 'payment' is set
      if (payment == undefined || payment == null) {
        throw new Error("Missing the required parameter 'payment' when calling receivePaymentOtp");
      }


      var pathParams = {
      };
      var queryParams = {
        'medium': medium
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/pos/otp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
