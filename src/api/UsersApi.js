/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConflictError', 'model/Error', 'model/ForbiddenError', 'model/GroupForRegistration', 'model/InputError', 'model/NotFoundError', 'model/UnauthorizedError', 'model/UserDataForEdit', 'model/UserDataForMap', 'model/UserDataForNew', 'model/UserDataForSearch', 'model/UserEdit', 'model/UserNew', 'model/UserRegistrationResult', 'model/UserResult', 'model/UserView'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ConflictError'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/GroupForRegistration'), require('../model/InputError'), require('../model/NotFoundError'), require('../model/UnauthorizedError'), require('../model/UserDataForEdit'), require('../model/UserDataForMap'), require('../model/UserDataForNew'), require('../model/UserDataForSearch'), require('../model/UserEdit'), require('../model/UserNew'), require('../model/UserRegistrationResult'), require('../model/UserResult'), require('../model/UserView'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.UsersApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ConflictError, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.GroupForRegistration, root.Cyclos471Api.InputError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError, root.Cyclos471Api.UserDataForEdit, root.Cyclos471Api.UserDataForMap, root.Cyclos471Api.UserDataForNew, root.Cyclos471Api.UserDataForSearch, root.Cyclos471Api.UserEdit, root.Cyclos471Api.UserNew, root.Cyclos471Api.UserRegistrationResult, root.Cyclos471Api.UserResult, root.Cyclos471Api.UserView);
  }
}(this, function(ApiClient, ConflictError, Error, ForbiddenError, GroupForRegistration, InputError, NotFoundError, UnauthorizedError, UserDataForEdit, UserDataForMap, UserDataForNew, UserDataForSearch, UserEdit, UserNew, UserRegistrationResult, UserResult, UserView) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 4.7.1
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRegistrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new user
     * Can either be a public registration, requiring no authorization, or an user registration by an administrator or broker. The public registration normally requires a CAPTCHA challenge to prevent bots. On user registration the following data is also user data is also created: * Address * Mobile phone * Landline phone * Images After the registration those data are managed separatedly than the user profile data.  
     * @param {module:model/UserNew} body The user to be registered
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRegistrationResult}
     */
    this.createUser = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling createUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserRegistrationResult;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataForMapDirectory operation.
     * @callback module:api/UsersApi~getDataForMapDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDataForMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration data for searching the user directory (map)
     * Returns data with the current configuration regarding the user  directory (map) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/UsersApi~getDataForMapDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDataForMap}
     */
    this.getDataForMapDirectory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserDataForMap;

      return this.apiClient.callApi(
        '/users/map/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupsForUserRegistration operation.
     * @callback module:api/UsersApi~getGroupsForUserRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupForRegistration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the groups the authenticated user or guest can register on
     * Returns the list of groups the authenticated user can use to perform a new user registration. If authenticated as guest, will return the groups currently set for public registration. When there is an authenticated administrator or broker, will be the configured groups for new users. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/UsersApi~getGroupsForUserRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupForRegistration>}
     */
    this.getGroupsForUserRegistration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GroupForRegistration];

      return this.apiClient.callApi(
        '/users/groups-for-registration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserDataForEdit operation.
     * @callback module:api/UsersApi~getUserDataForEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDataForEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration data to edit an user profile
     * Returns data to edit an user profile. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/UsersApi~getUserDataForEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDataForEdit}
     */
    this.getUserDataForEdit = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getUserDataForEdit");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserDataForEdit;

      return this.apiClient.callApi(
        '/users/{user}/data-for-edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserDataForNew operation.
     * @callback module:api/UsersApi~getUserDataForNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDataForNew} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration data for registering new users
     * Almost every aspect of an user profile is configurable in Cyclos, such as enabled basic profile fields, custom profile fields, address fields, phone configuration and so on. As such, if a front-end needs to be robust to such a dynamic nature, it should get this information in order to create a correct registration form.  
     * @param {String} group The intial group for the new user
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/UsersApi~getUserDataForNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDataForNew}
     */
    this.getUserDataForNew = function(group, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'group' is set
      if (group == undefined || group == null) {
        throw new Error("Missing the required parameter 'group' when calling getUserDataForNew");
      }


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'group': group
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserDataForNew;

      return this.apiClient.callApi(
        '/users/data-for-new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserDataForSearch operation.
     * @callback module:api/UsersApi~getUserDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration data for searching users
     * Returns data with the current configuration regarding the user search 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/UsersApi~getUserDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDataForSearch}
     */
    this.getUserDataForSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserDataForSearch;

      return this.apiClient.callApi(
        '/users/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchMapDirectory operation.
     * @callback module:api/UsersApi~searchMapDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the user directory (map)
     * Returns a page of users in the map directory that match a given criteria 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.usersToExclude Indicated the users to be excluded from the result 
     * @param {Array.<String>} opts.usersToInclude Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result. 
     * @param {Array.<Date>} opts.activationPeriod The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastLoginPeriod The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.groups Either id or internal names of groups / group sets
     * @param {Array.<String>} opts.brokers Either id or a principal (login name, e-mail, etc) for brokers
     * @param {Boolean} opts.mainBrokerOnly When set to &#x60;true&#x60;, will match only users that have the brokers as set in the &#x60;brokers&#x60; parameter as main broker.  
     * @param {Number} opts.latitude The reference latitude for distance searches
     * @param {Number} opts.longitude The reference longitude for distance searches
     * @param {Number} opts.maxDistance Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both &#x60;longitude&#x60; and &#x60;latitude&#x60; parameters are passed with the actual reference position. 
     * @param {module:model/String} opts.addressResult Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * none: Addresses are not returned. * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (&#x60;latitude&#x60; and &#x60;longitude&#x60;) * primary: The primary (default) address is returned 
     * @param {Boolean} opts.includeGroup When set to &#x60;true&#x60; and the logged user has permission to view user groups, will return the &#x60;group&#x60; property on users.  
     * @param {Boolean} opts.includeGroupSet When set to &#x60;true&#x60; and the logged user has permission to view user group sets, will return the &#x60;groupSet&#x60; property on users.  
     * @param {Boolean} opts.ignoreProfileFieldsInList When set to &#x60;true&#x60;, instead of returning users with corresponding profile fields set on list, will return them with &#x60;display&#x60; and &#x60;shortDisplay&#x60;.  
     * @param {Boolean} opts.excludeContacts When set to &#x60;true&#x60; will not return any user that is already a contact of the currently authenticated user. 
     * @param {Array.<module:model/String>} opts.statuses The possible statuses for an user Possible values for each array element are: * active: The user is active and can use the system normally. * blocked: The user has been blocked from accessing the system. Other users still see him/her. * disabled: The user has been disabled - he/she cannot access the system and is invisible by other users. * removed: The user was permanently removed. It&#39;s profile is kept for historical purposes. * pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users. 
     * @param {Array.<module:model/String>} opts.roles The main role the user has. Possible values for each array element are: * administrator: A user who can manage the system and other users. * broker: A user who can manage other users. * member: A regular user who can manage operators.  * operator: A \&quot;sub-user\&quot; created by a member to manage his data. 
     * @param {module:model/String} opts.orderBy Possible options for ordering the results of an user search. Possible values are: * relevance: This is the default if keywords are used. Best matching users come first. * creationDate: Newly registered users are returned first. * alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order. * alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order. * distance: Only useful when providing a location, will return nearer advertisements first. * random: Users will be randomly returned 
     * @param {module:api/UsersApi~searchMapDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResult>}
     */
    this.searchMapDirectory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'usersToExclude': this.apiClient.buildCollectionParam(opts['usersToExclude'], 'csv'),
        'usersToInclude': this.apiClient.buildCollectionParam(opts['usersToInclude'], 'csv'),
        'activationPeriod': this.apiClient.buildCollectionParam(opts['activationPeriod'], 'csv'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv'),
        'lastLoginPeriod': this.apiClient.buildCollectionParam(opts['lastLoginPeriod'], 'csv'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'brokers': this.apiClient.buildCollectionParam(opts['brokers'], 'csv'),
        'mainBrokerOnly': opts['mainBrokerOnly'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'maxDistance': opts['maxDistance'],
        'addressResult': opts['addressResult'],
        'includeGroup': opts['includeGroup'],
        'includeGroupSet': opts['includeGroupSet'],
        'ignoreProfileFieldsInList': opts['ignoreProfileFieldsInList'],
        'excludeContacts': opts['excludeContacts'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'roles': this.apiClient.buildCollectionParam(opts['roles'], 'csv'),
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserResult];

      return this.apiClient.callApi(
        '/users/map', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:api/UsersApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users
     * Returns a page of users that match a given criteria. The fields returned depend on the products, in the profile fields of other users setting. Only fields (both basic or custom) marked to be returned on user list are returned. If no fields are set to be returned, the resulting objects will have the &#x60;display&#x60; and &#x60;shortDisplay&#x60; filled in. However, those fields are not returned when another profile field is returned, preventing duplicated data to be returned.  
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.usersToExclude Indicated the users to be excluded from the result 
     * @param {Array.<String>} opts.usersToInclude Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result. 
     * @param {Array.<Date>} opts.activationPeriod The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastLoginPeriod The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.groups Either id or internal names of groups / group sets
     * @param {Array.<String>} opts.brokers Either id or a principal (login name, e-mail, etc) for brokers
     * @param {Boolean} opts.mainBrokerOnly When set to &#x60;true&#x60;, will match only users that have the brokers as set in the &#x60;brokers&#x60; parameter as main broker.  
     * @param {Number} opts.latitude The reference latitude for distance searches
     * @param {Number} opts.longitude The reference longitude for distance searches
     * @param {Number} opts.maxDistance Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both &#x60;longitude&#x60; and &#x60;latitude&#x60; parameters are passed with the actual reference position. 
     * @param {module:model/String} opts.addressResult Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * none: Addresses are not returned. * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (&#x60;latitude&#x60; and &#x60;longitude&#x60;) * primary: The primary (default) address is returned 
     * @param {Boolean} opts.includeGroup When set to &#x60;true&#x60; and the logged user has permission to view user groups, will return the &#x60;group&#x60; property on users.  
     * @param {Boolean} opts.includeGroupSet When set to &#x60;true&#x60; and the logged user has permission to view user group sets, will return the &#x60;groupSet&#x60; property on users.  
     * @param {Boolean} opts.ignoreProfileFieldsInList When set to &#x60;true&#x60;, instead of returning users with corresponding profile fields set on list, will return them with &#x60;display&#x60; and &#x60;shortDisplay&#x60;.  
     * @param {Boolean} opts.excludeContacts When set to &#x60;true&#x60; will not return any user that is already a contact of the currently authenticated user. 
     * @param {Array.<module:model/String>} opts.statuses The possible statuses for an user Possible values for each array element are: * active: The user is active and can use the system normally. * blocked: The user has been blocked from accessing the system. Other users still see him/her. * disabled: The user has been disabled - he/she cannot access the system and is invisible by other users. * removed: The user was permanently removed. It&#39;s profile is kept for historical purposes. * pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users. 
     * @param {Array.<module:model/String>} opts.roles The main role the user has. Possible values for each array element are: * administrator: A user who can manage the system and other users. * broker: A user who can manage other users. * member: A regular user who can manage operators.  * operator: A \&quot;sub-user\&quot; created by a member to manage his data. 
     * @param {module:model/String} opts.orderBy Possible options for ordering the results of an user search. Possible values are: * relevance: This is the default if keywords are used. Best matching users come first. * creationDate: Newly registered users are returned first. * alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order. * alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order. * distance: Only useful when providing a location, will return nearer advertisements first. * random: Users will be randomly returned 
     * @param {module:api/UsersApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResult>}
     */
    this.searchUsers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'usersToExclude': this.apiClient.buildCollectionParam(opts['usersToExclude'], 'csv'),
        'usersToInclude': this.apiClient.buildCollectionParam(opts['usersToInclude'], 'csv'),
        'activationPeriod': this.apiClient.buildCollectionParam(opts['activationPeriod'], 'csv'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv'),
        'lastLoginPeriod': this.apiClient.buildCollectionParam(opts['lastLoginPeriod'], 'csv'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'brokers': this.apiClient.buildCollectionParam(opts['brokers'], 'csv'),
        'mainBrokerOnly': opts['mainBrokerOnly'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'maxDistance': opts['maxDistance'],
        'addressResult': opts['addressResult'],
        'includeGroup': opts['includeGroup'],
        'includeGroupSet': opts['includeGroupSet'],
        'ignoreProfileFieldsInList': opts['ignoreProfileFieldsInList'],
        'excludeContacts': opts['excludeContacts'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'roles': this.apiClient.buildCollectionParam(opts['roles'], 'csv'),
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserResult];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save an user details
     * Saves the user profile. Only the basic fields (full name, login name, e-mail) and custom fields can be saved with this operation. Addresses, phones and images must be managed through their own paths. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {module:model/UserEdit} body The user to be saved
     * @param {Object} opts Optional parameters
     * @param {String} opts.confirmationPassword The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUser = function(user, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling updateUser");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling updateUser");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
        'confirmationPassword': opts['confirmationPassword']
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewUser operation.
     * @callback module:api/UsersApi~viewUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View an user details
     * Returns the profile information of an user. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/UsersApi~viewUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserView}
     */
    this.viewUser = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling viewUser");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserView;

      return this.apiClient.callApi(
        '/users/{user}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
