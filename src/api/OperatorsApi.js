/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/ForbiddenError', 'model/GeneralOperatorsDataForSearch', 'model/NotFoundError', 'model/UnauthorizedError', 'model/UserOperatorsDataForSearch', 'model/UserResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/GeneralOperatorsDataForSearch'), require('../model/NotFoundError'), require('../model/UnauthorizedError'), require('../model/UserOperatorsDataForSearch'), require('../model/UserResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.OperatorsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.GeneralOperatorsDataForSearch, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError, root.Cyclos471Api.UserOperatorsDataForSearch, root.Cyclos471Api.UserResult);
  }
}(this, function(ApiClient, Error, ForbiddenError, GeneralOperatorsDataForSearch, NotFoundError, UnauthorizedError, UserOperatorsDataForSearch, UserResult) {
  'use strict';

  /**
   * Operators service.
   * @module api/OperatorsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new OperatorsApi. 
   * @alias module:api/OperatorsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getGeneralOperatorsDataForSearch operation.
     * @callback module:api/OperatorsApi~getGeneralOperatorsDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralOperatorsDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration data for searching operators of any managed user
     * Returns data with the current configuration regarding the search of operators of managed users. This is meant to be used by either administrators or brokers  
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/OperatorsApi~getGeneralOperatorsDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralOperatorsDataForSearch}
     */
    this.getGeneralOperatorsDataForSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GeneralOperatorsDataForSearch;

      return this.apiClient.callApi(
        '/operators/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserOperatorsDataForSearch operation.
     * @callback module:api/OperatorsApi~getUserOperatorsDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOperatorsDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration data for searching operators of the given user
     * Returns data with the current configuration regarding the operators of the given user  
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/OperatorsApi~getUserOperatorsDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOperatorsDataForSearch}
     */
    this.getUserOperatorsDataForSearch = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getUserOperatorsDataForSearch");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserOperatorsDataForSearch;

      return this.apiClient.callApi(
        '/{user}/operators/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGeneralOperators operation.
     * @callback module:api/OperatorsApi~searchGeneralOperatorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the visible operators (of any managed user)
     * Returns a page of operators that match a given criteria 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {Array.<String>} opts.userGroups Either id or internal names of user groups / group sets
     * @param {String} opts.broker Either id or a principal (login name, e-mail, etc) of the user broker
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<module:model/String>} opts.statuses The possible statuses for an user Possible values for each array element are: * active: The user is active and can use the system normally. * blocked: The user has been blocked from accessing the system. Other users still see him/her. * disabled: The user has been disabled - he/she cannot access the system and is invisible by other users. * removed: The user was permanently removed. It&#39;s profile is kept for historical purposes. * pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users. 
     * @param {module:api/OperatorsApi~searchGeneralOperatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResult>}
     */
    this.searchGeneralOperators = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'userGroups': this.apiClient.buildCollectionParam(opts['userGroups'], 'csv'),
        'broker': opts['broker'],
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserResult];

      return this.apiClient.callApi(
        '/operators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUserOperators operation.
     * @callback module:api/OperatorsApi~searchUserOperatorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the operators of a given user
     * Returns a page of operators that match a given criteria 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {Boolean} opts.ignoreProfileFieldsInList When set to &#x60;true&#x60;, instead of returning users with corresponding profile fields set on list, will return them with &#x60;display&#x60; and &#x60;shortDisplay&#x60;.  
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.operatorGroups An array of operator group ids
     * @param {Array.<module:model/String>} opts.statuses The possible statuses for an user Possible values for each array element are: * active: The user is active and can use the system normally. * blocked: The user has been blocked from accessing the system. Other users still see him/her. * disabled: The user has been disabled - he/she cannot access the system and is invisible by other users. * removed: The user was permanently removed. It&#39;s profile is kept for historical purposes. * pending: The user registration is pending a confirmation. Probably the user has received an e-mail with a link that must be followed to complete the activation. The user is invisible by other users. 
     * @param {module:api/OperatorsApi~searchUserOperatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResult>}
     */
    this.searchUserOperators = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling searchUserOperators");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'ignoreProfileFieldsInList': opts['ignoreProfileFieldsInList'],
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv'),
        'operatorGroups': this.apiClient.buildCollectionParam(opts['operatorGroups'], 'csv'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserResult];

      return this.apiClient.callApi(
        '/{user}/operators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
