/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConflictError', 'model/Error', 'model/ForbiddenError', 'model/InputError', 'model/NotFoundError', 'model/OwnerRecordPermissions', 'model/RecordDataForEdit', 'model/RecordDataForNew', 'model/RecordDataForSearch', 'model/RecordDataForSharedSearch', 'model/RecordEdit', 'model/RecordNew', 'model/RecordResult', 'model/RecordTypeWithMenu', 'model/RecordView', 'model/RecordWithOwnerResult', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ConflictError'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/InputError'), require('../model/NotFoundError'), require('../model/OwnerRecordPermissions'), require('../model/RecordDataForEdit'), require('../model/RecordDataForNew'), require('../model/RecordDataForSearch'), require('../model/RecordDataForSharedSearch'), require('../model/RecordEdit'), require('../model/RecordNew'), require('../model/RecordResult'), require('../model/RecordTypeWithMenu'), require('../model/RecordView'), require('../model/RecordWithOwnerResult'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.RecordsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ConflictError, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.InputError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.OwnerRecordPermissions, root.Cyclos471Api.RecordDataForEdit, root.Cyclos471Api.RecordDataForNew, root.Cyclos471Api.RecordDataForSearch, root.Cyclos471Api.RecordDataForSharedSearch, root.Cyclos471Api.RecordEdit, root.Cyclos471Api.RecordNew, root.Cyclos471Api.RecordResult, root.Cyclos471Api.RecordTypeWithMenu, root.Cyclos471Api.RecordView, root.Cyclos471Api.RecordWithOwnerResult, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, ConflictError, Error, ForbiddenError, InputError, NotFoundError, OwnerRecordPermissions, RecordDataForEdit, RecordDataForNew, RecordDataForSearch, RecordDataForSharedSearch, RecordEdit, RecordNew, RecordResult, RecordTypeWithMenu, RecordView, RecordWithOwnerResult, UnauthorizedError) {
  'use strict';

  /**
   * Records service.
   * @module api/RecordsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new RecordsApi. 
   * @alias module:api/RecordsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRecord operation.
     * @callback module:api/RecordsApi~createRecordCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new record for the given owner and type
     * Creates a new record for the given owner and type. If the owner is &#x60;system&#x60; will be a system record. Otherwise will be an user record. 
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} type Either the identifier or internal name of the record type
     * @param {module:model/RecordNew} record The record to be created
     * @param {module:api/RecordsApi~createRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createRecord = function(owner, type, record, callback) {
      var postBody = record;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling createRecord");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling createRecord");
      }

      // verify the required parameter 'record' is set
      if (record == undefined || record == null) {
        throw new Error("Missing the required parameter 'record' when calling createRecord");
      }


      var pathParams = {
        'owner': owner,
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/{owner}/records/{type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecord operation.
     * @callback module:api/RecordsApi~deleteRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a record
     * Removes a record
     * @param {String} id The object identification
     * @param {module:api/RecordsApi~deleteRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRecord = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRecord");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/records/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordDataForEdit operation.
     * @callback module:api/RecordsApi~getRecordDataForEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDataForEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data to edit an existing record
     * Returns configuration data for editing a record, plus the current &#x60;RecordEdit&#x60; object that can be altered and sent back 
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~getRecordDataForEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDataForEdit}
     */
    this.getRecordDataForEdit = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getRecordDataForEdit");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordDataForEdit;

      return this.apiClient.callApi(
        '/records/{id}/data-for-edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordDataForGeneralSearch operation.
     * @callback module:api/RecordsApi~getRecordDataForGeneralSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching records of a type over any owner
     * Returns data for searching records of a specific type over any owner. Is not tied to a particular owner (user or system), hence, is considered a general search.  
     * @param {String} type Either the identifier or internal name of the record type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~getRecordDataForGeneralSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDataForSearch}
     */
    this.getRecordDataForGeneralSearch = function(type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling getRecordDataForGeneralSearch");
      }


      var pathParams = {
        'type': type
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordDataForSearch;

      return this.apiClient.callApi(
        '/general-records/{type}/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordDataForNew operation.
     * @callback module:api/RecordsApi~getRecordDataForNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDataForNew} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data to create a new record
     * Returns configuration data for creating a record for the given owner and type. If the owner is &#x60;system&#x60; will be a system record. Otherwise will be an user record.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} type The record type to be created
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~getRecordDataForNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDataForNew}
     */
    this.getRecordDataForNew = function(owner, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling getRecordDataForNew");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling getRecordDataForNew");
      }


      var pathParams = {
        'owner': owner,
        'type': type
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordDataForNew;

      return this.apiClient.callApi(
        '/{owner}/records/{type}/data-for-new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordDataForOwnerSearch operation.
     * @callback module:api/RecordsApi~getRecordDataForOwnerSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching records of a specific type and owner
     * Returns data for searching records of a specific type, either for system or user records, depending on the &#x60;owner&#x60; parameter.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} type Either the identifier or internal name of the record type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~getRecordDataForOwnerSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDataForSearch}
     */
    this.getRecordDataForOwnerSearch = function(owner, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling getRecordDataForOwnerSearch");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling getRecordDataForOwnerSearch");
      }


      var pathParams = {
        'owner': owner,
        'type': type
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordDataForSearch;

      return this.apiClient.callApi(
        '/{owner}/records/{type}/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordDataForSharedSearch operation.
     * @callback module:api/RecordsApi~getRecordDataForSharedSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordDataForSharedSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching records with shared fields
     * Returns data for searching records from multiple types, using shared fields. Only user records can be shared this way.  
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~getRecordDataForSharedSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordDataForSharedSearch}
     */
    this.getRecordDataForSharedSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordDataForSharedSearch;

      return this.apiClient.callApi(
        '/shared-records/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordTypeByOwner operation.
     * @callback module:api/RecordsApi~getRecordTypeByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OwnerRecordPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single record type over an user or system
     * Returns the a specific record type the authenticated user can view over the given user or system if the &#x60;system&#x60; owner is used.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} type Either the identifier or internal name of the record type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~getRecordTypeByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OwnerRecordPermissions}
     */
    this.getRecordTypeByOwner = function(owner, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling getRecordTypeByOwner");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling getRecordTypeByOwner");
      }


      var pathParams = {
        'owner': owner,
        'type': type
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OwnerRecordPermissions;

      return this.apiClient.callApi(
        '/{owner}/record-types/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecordTypesByOwner operation.
     * @callback module:api/RecordsApi~listRecordTypesByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OwnerRecordPermissions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the record types over an user or system
     * Returns the record types the authenticated user can view over the given user or system if the &#x60;system&#x60; owner is used.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~listRecordTypesByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OwnerRecordPermissions>}
     */
    this.listRecordTypesByOwner = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling listRecordTypesByOwner");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [OwnerRecordPermissions];

      return this.apiClient.callApi(
        '/{owner}/record-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecordTypesForGeneralSearch operation.
     * @callback module:api/RecordsApi~listRecordTypesForGeneralSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecordTypeWithMenu>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the record types for general search
     * Returns the record types the authenticated user can use to search records in general, that is, without being of a particular user, but any managed user.  
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~listRecordTypesForGeneralSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecordTypeWithMenu>}
     */
    this.listRecordTypesForGeneralSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RecordTypeWithMenu];

      return this.apiClient.callApi(
        '/general-records/record-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGeneralRecords operation.
     * @callback module:api/RecordsApi~searchGeneralRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecordWithOwnerResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for records of a specific type over any owner
     * Returns records matching the search criteria, for a specific type. The custom fields returned on each record depend on the field configuration, which needs to be enabled to return on list. The profile fields available as search filters for records are assigned in the products (or admin group permissions). 
     * @param {String} type Either the identifier or internal name of the record type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {Array.<String>} opts.brokers Either the ids or identification methods of record owners&#39; brokers 
     * @param {Array.<String>} opts.groups Either the ids or internal names of record owners&#39; groups 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum record creation date 
     * @param {module:api/RecordsApi~searchGeneralRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecordWithOwnerResult>}
     */
    this.searchGeneralRecords = function(type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling searchGeneralRecords");
      }


      var pathParams = {
        'type': type
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'brokers': this.apiClient.buildCollectionParam(opts['brokers'], 'csv'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RecordWithOwnerResult];

      return this.apiClient.callApi(
        '/general-records/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchOwnerRecords operation.
     * @callback module:api/RecordsApi~searchOwnerRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecordResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for records of a specific type and owner
     * Returns records matching the search criteria, for a specific type,  either for system or user records, depending on the &#x60;owner&#x60; parameter. The custom fields returned on each record depend on the field configuration, which needs to be enabled to return on list. The profile fields available as search filters for records are assigned in the products (or admin group permissions). 
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} type Either the identifier or internal name of the record type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum record creation date 
     * @param {module:api/RecordsApi~searchOwnerRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecordResult>}
     */
    this.searchOwnerRecords = function(owner, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling searchOwnerRecords");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling searchOwnerRecords");
      }


      var pathParams = {
        'owner': owner,
        'type': type
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RecordResult];

      return this.apiClient.callApi(
        '/{owner}/records/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSharedRecords operation.
     * @callback module:api/RecordsApi~searchSharedRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecordWithOwnerResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for records with shared fields
     * Returns records matching the search criteria, using shared fields. This allows searching over multiple record types that use shared fields. The custom fields returned on each record depend on the field configuration, which needs to be enabled to return on list. The profile fields available as search filters for records are assigned in the products (or admin group permissions). 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {Array.<String>} opts.types Either the ids or identification methods of record types 
     * @param {Array.<String>} opts.brokers Either the ids or identification methods of record owners&#39; brokers 
     * @param {Array.<String>} opts.groups Either the ids or internal names of record owners&#39; groups 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum record creation date 
     * @param {module:api/RecordsApi~searchSharedRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecordWithOwnerResult>}
     */
    this.searchSharedRecords = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'types': this.apiClient.buildCollectionParam(opts['types'], 'csv'),
        'brokers': this.apiClient.buildCollectionParam(opts['brokers'], 'csv'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RecordWithOwnerResult];

      return this.apiClient.callApi(
        '/shared-records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecord operation.
     * @callback module:api/RecordsApi~updateRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing record
     * Updates an existing record
     * @param {String} id The object identification
     * @param {module:model/RecordEdit} record The record to be edited
     * @param {module:api/RecordsApi~updateRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRecord = function(id, record, callback) {
      var postBody = record;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateRecord");
      }

      // verify the required parameter 'record' is set
      if (record == undefined || record == null) {
        throw new Error("Missing the required parameter 'record' when calling updateRecord");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/records/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewRecord operation.
     * @callback module:api/RecordsApi~viewRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of a specific record
     * Returns information about a record, located by id
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/RecordsApi~viewRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordView}
     */
    this.viewRecord = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling viewRecord");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RecordView;

      return this.apiClient.callApi(
        '/records/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
