/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Auth', 'model/ChangeForgottenPassword', 'model/ConflictError', 'model/DataForChangeForgottenPassword', 'model/DataForLogin', 'model/Error', 'model/ForbiddenError', 'model/ForgottenPasswordRequest', 'model/InputError', 'model/NotFoundError', 'model/OtpError', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Auth'), require('../model/ChangeForgottenPassword'), require('../model/ConflictError'), require('../model/DataForChangeForgottenPassword'), require('../model/DataForLogin'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/ForgottenPasswordRequest'), require('../model/InputError'), require('../model/NotFoundError'), require('../model/OtpError'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.AuthApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.Auth, root.Cyclos471Api.ChangeForgottenPassword, root.Cyclos471Api.ConflictError, root.Cyclos471Api.DataForChangeForgottenPassword, root.Cyclos471Api.DataForLogin, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.ForgottenPasswordRequest, root.Cyclos471Api.InputError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.OtpError, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, Auth, ChangeForgottenPassword, ConflictError, DataForChangeForgottenPassword, DataForLogin, Error, ForbiddenError, ForgottenPasswordRequest, InputError, NotFoundError, OtpError, UnauthorizedError) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 4.7.1
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the changeForgottenPassword operation.
     * @callback module:api/AuthApi~changeForgottenPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the a forgotten password after have completed the request 
     * Changes the password (if manual), or sends a new one by e-mail (if generated) after the forgotten password reset process is completed.  
     * @param {module:model/ChangeForgottenPassword} params The parameters for changing the password
     * @param {module:api/AuthApi~changeForgottenPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changeForgottenPassword = function(params, callback) {
      var postBody = params;

      // verify the required parameter 'params' is set
      if (params == undefined || params == null) {
        throw new Error("Missing the required parameter 'params' when calling changeForgottenPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/forgotten-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disconnectCurrentClient operation.
     * @callback module:api/AuthApi~disconnectCurrentClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disconnect the current access client
     * Changes the status of the access client used for authentication, disconnecting it. To be reused, it has to be activated again. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.confirmationPassword The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
     * @param {module:api/AuthApi~disconnectCurrentClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.disconnectCurrentClient = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'confirmationPassword': opts['confirmationPassword']
      };
      var formParams = {
      };

      var authNames = ['accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/access-client', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forgottenPasswordRequest operation.
     * @callback module:api/AuthApi~forgottenPasswordRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a forgotten password, notifying the user with instructions to reset it 
     * Sends an e-mail (in the future SMS will be supported) with instructions on how to reset the password, in case it was forgotten. In order to work, the Cyclos configuration options, both to show the forgotten password link and to enable for users need to be set. 
     * @param {module:model/ForgottenPasswordRequest} params The parameters for requesting a forgotten password reset
     * @param {module:api/AuthApi~forgottenPasswordRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.forgottenPasswordRequest = function(params, callback) {
      var postBody = params;

      // verify the required parameter 'params' is set
      if (params == undefined || params == null) {
        throw new Error("Missing the required parameter 'params' when calling forgottenPasswordRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/forgotten-password/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentAuth operation.
     * @callback module:api/AuthApi~getCurrentAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data about the currently authenticated user
     * Returns the logged user information. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/AuthApi~getCurrentAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    this.getCurrentAuth = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Auth;

      return this.apiClient.callApi(
        '/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataForChangeForgottenPassword operation.
     * @callback module:api/AuthApi~getDataForChangeForgottenPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForChangeForgottenPassword} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration data used to change a forgotten password after the initial request 
     * After the user has requested a forgotten password reset, using the &#x60;POST /auth/forgotten-password/request&#x60; path, the link on the received e-mail will contain a key which can be used to actually change the password. This key must be passed to this operation in order to request input on the new password, and maybe confirm the security question, depending on the Cyclos configuration.  
     * @param {String} key The validation key which was sent by e-mail to the user
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/AuthApi~getDataForChangeForgottenPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForChangeForgottenPassword}
     */
    this.getDataForChangeForgottenPassword = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling getDataForChangeForgottenPassword");
      }


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'key': key
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForChangeForgottenPassword;

      return this.apiClient.callApi(
        '/auth/forgotten-password/data-for-change', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataForLogin operation.
     * @callback module:api/AuthApi~getDataForLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForLogin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data containing the configuration for logging-in
     * Contains data useful for login, such as the allowed user identification methods, the password type and data for the forgot password request. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/AuthApi~getDataForLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForLogin}
     */
    this.getDataForLogin = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForLogin;

      return this.apiClient.callApi(
        '/auth/data-for-login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs-in the currently authenticated user
     * Logs-in the currently authenticated user, returning the session token. This token can then be used on subsequent requests. After finishing the session, the user can then logout by sending an HTTP DELETE to /auth. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    this.login = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Auth;

      return this.apiClient.callApi(
        '/auth/session', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AuthApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log-out the current session
     * Invalidates the session used for authentication
     * @param {module:api/AuthApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logout = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/session', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the newOtp operation.
     * @callback module:api/AuthApi~newOtpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new One-Time-Password (OTP) for the authenticated user
     * Sends a new OTP for the authenticated user. Used when the confirmation password of a specific action. Used when &#x60;PasswordInput.mode&#x60; is &#x60;otp&#x60;.  
     * @param {module:model/String} medium The medium the user wants to receive the OTP Possible values are: * email: The user will receive an email with the information * sms: The user will receive a sms with the information (only if there is at least one phone enabled for sms) 
     * @param {module:api/AuthApi~newOtpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.newOtp = function(medium, callback) {
      var postBody = null;

      // verify the required parameter 'medium' is set
      if (medium == undefined || medium == null) {
        throw new Error("Missing the required parameter 'medium' when calling newOtp");
      }


      var pathParams = {
      };
      var queryParams = {
        'medium': medium
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/auth/otp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
