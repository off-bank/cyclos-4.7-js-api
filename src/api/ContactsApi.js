/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConflictError', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/UnauthorizedError', 'model/UserResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ConflictError'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/UnauthorizedError'), require('../model/UserResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.ContactsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ConflictError, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError, root.Cyclos471Api.UserResult);
  }
}(this, function(ApiClient, ConflictError, Error, ForbiddenError, NotFoundError, UnauthorizedError, UserResult) {
  'use strict';

  /**
   * Contacts service.
   * @module api/ContactsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new ContactsApi. 
   * @alias module:api/ContactsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addContact operation.
     * @callback module:api/ContactsApi~addContactCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an user in the contact list of the given user
     * Adds an user in the contact list of the given user
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} contact The user to be added to the contact list
     * @param {module:api/ContactsApi~addContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.addContact = function(user, contact, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling addContact");
      }

      // verify the required parameter 'contact' is set
      if (contact == undefined || contact == null) {
        throw new Error("Missing the required parameter 'contact' when calling addContact");
      }


      var pathParams = {
        'user': user,
        'contact': contact
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/{user}/contacts/{contact}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContact operation.
     * @callback module:api/ContactsApi~removeContactCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an user from the contact list of the given user
     * Removes an user from the contact list of the given user
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} contact The user to be removed from the contact list
     * @param {module:api/ContactsApi~removeContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.removeContact = function(user, contact, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling removeContact");
      }

      // verify the required parameter 'contact' is set
      if (contact == undefined || contact == null) {
        throw new Error("Missing the required parameter 'contact' when calling removeContact");
      }


      var pathParams = {
        'user': user,
        'contact': contact
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/{user}/contacts/{contact}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchContacts operation.
     * @callback module:api/ContactsApi~searchContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for an user contacts
     * Returns a page of users that are in the contact list of the given user The fields returned depend on the products, in the profile fields of other users setting. Only fields (both basic or custom) marked to be returned on user list are returned. If no fields are set to be returned, the resulting objects will have the &#x60;display&#x60; and &#x60;shortDisplay&#x60; filled in. However, those fields are not returned when another profile field is returned, preventing duplicated data to be returned. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {module:api/ContactsApi~searchContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResult>}
     */
    this.searchContacts = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling searchContacts");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserResult];

      return this.apiClient.callApi(
        '/{user}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
