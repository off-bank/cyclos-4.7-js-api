/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/Operation', 'model/OperationDataForRun', 'model/RunOperation', 'model/RunOperationResult', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/Operation'), require('../model/OperationDataForRun'), require('../model/RunOperation'), require('../model/RunOperationResult'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.OperationsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.Operation, root.Cyclos471Api.OperationDataForRun, root.Cyclos471Api.RunOperation, root.Cyclos471Api.RunOperationResult, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, Error, ForbiddenError, NotFoundError, Operation, OperationDataForRun, RunOperation, RunOperationResult, UnauthorizedError) {
  'use strict';

  /**
   * Operations service.
   * @module api/OperationsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new OperationsApi. 
   * @alias module:api/OperationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getOperationDataForRun operation.
     * @callback module:api/OperationsApi~getOperationDataForRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationDataForRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration data for running a custom operation
     * Returns data to run a specific custom operation over a specific over the given user or system if the &#x60;system&#x60; owner is used.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} operation Either the id or internal name of the custom operation
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/OperationsApi~getOperationDataForRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationDataForRun}
     */
    this.getOperationDataForRun = function(owner, operation, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling getOperationDataForRun");
      }

      // verify the required parameter 'operation' is set
      if (operation == undefined || operation == null) {
        throw new Error("Missing the required parameter 'operation' when calling getOperationDataForRun");
      }


      var pathParams = {
        'owner': owner,
        'operation': operation
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = OperationDataForRun;

      return this.apiClient.callApi(
        '/{owner}/operations/{operation}/data-for-run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOperationsByOwner operation.
     * @callback module:api/OperationsApi~listOperationsByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Operation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the custom operations over the system or user
     * Returns the custom operations the authenticated user can run over the given user or system if the &#x60;system&#x60; owner is used.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/OperationsApi~listOperationsByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Operation>}
     */
    this.listOperationsByOwner = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling listOperationsByOwner");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Operation];

      return this.apiClient.callApi(
        '/{owner}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runOperation operation.
     * @callback module:api/OperationsApi~runOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs a custom operation either for system or user
     * Runs a specific custom operation over a specific over the given user or system if the &#x60;system&#x60; owner is used. If the operation resulted in a file download (either because the &#x60;resultType&#x60; is &#x60;fileDownload&#x60; or is a &#x60;resultPage&#x60; running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an &#x60;application/json&#x60; with the result object.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} operation Either the id or internal name of the custom operation
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:model/RunOperation} opts.params The custom operation parameters
     * @param {module:api/OperationsApi~runOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunOperationResult}
     */
    this.runOperation = function(owner, operation, opts, callback) {
      opts = opts || {};
      var postBody = opts['params'];

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling runOperation");
      }

      // verify the required parameter 'operation' is set
      if (operation == undefined || operation == null) {
        throw new Error("Missing the required parameter 'operation' when calling runOperation");
      }


      var pathParams = {
        'owner': owner,
        'operation': operation
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain', 'text/html', 'text/css', 'text/yaml', 'text/javascript', 'text/csv', 'image/jpeg', 'image/gif', 'image/png', 'application/pdf', 'application/zip', 'image/svg+xml', 'application/octet-stream'];
      var returnType = RunOperationResult;

      return this.apiClient.callApi(
        '/{owner}/operations/{operation}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runOperationWithUpload operation.
     * @callback module:api/OperationsApi~runOperationWithUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunOperationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs a custom operation either for system or user while uploading a file 
     * Runs a specific custom operation over a specific over the given user or system if the &#x60;system&#x60; owner is used.  This path allows uploading a file, by using a &#x60;multipart-form-data&#x60; post. If the operation resulted in a file download (either because the &#x60;resultType&#x60; is &#x60;fileDownload&#x60; or is a &#x60;resultPage&#x60; running for either PDF or CSV) the resulting contente type will be of the file itself. Otherwise will result in an &#x60;application/json&#x60; with the result object.  
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} operation Either the id or internal name of the custom operation
     * @param {File} file The file being uploaded
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {String} opts.params The custom operation parameters, encoded as &#x60;RunOperation&#x60;.  
     * @param {module:api/OperationsApi~runOperationWithUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunOperationResult}
     */
    this.runOperationWithUpload = function(owner, operation, file, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling runOperationWithUpload");
      }

      // verify the required parameter 'operation' is set
      if (operation == undefined || operation == null) {
        throw new Error("Missing the required parameter 'operation' when calling runOperationWithUpload");
      }

      // verify the required parameter 'file' is set
      if (file == undefined || file == null) {
        throw new Error("Missing the required parameter 'file' when calling runOperationWithUpload");
      }


      var pathParams = {
        'owner': owner,
        'operation': operation
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
        'params': opts['params'],
        'file': file
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/plain', 'text/html', 'text/css', 'text/yaml', 'text/javascript', 'text/csv', 'image/jpeg', 'image/gif', 'image/png', 'application/pdf', 'application/zip', 'image/svg+xml', 'application/octet-stream'];
      var returnType = RunOperationResult;

      return this.apiClient.callApi(
        '/{owner}/operations/{operation}/run-upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
