/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivateClientResult', 'model/ClientView', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/UnauthorizedError', 'model/UserClientTypePermissions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActivateClientResult'), require('../model/ClientView'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/UnauthorizedError'), require('../model/UserClientTypePermissions'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.ClientsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ActivateClientResult, root.Cyclos471Api.ClientView, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError, root.Cyclos471Api.UserClientTypePermissions);
  }
}(this, function(ApiClient, ActivateClientResult, ClientView, Error, ForbiddenError, NotFoundError, UnauthorizedError, UserClientTypePermissions) {
  'use strict';

  /**
   * Clients service.
   * @module api/ClientsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new ClientsApi. 
   * @alias module:api/ClientsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activateClient operation.
     * @callback module:api/ClientsApi~activateClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivateClientResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates an access client
     * Activates an access client belonging to the currently authenticated user. 
     * @param {String} code The activation code. Must match the activation code obtained in Cyclos, which belongs to the authenticated user. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.prefix A prefix to be added to the generated access client token. Can be used to increase the size of the generated token, and to increase the security on clients that have to store the token. This can be accomplished by using some sort of client application hash or identifier, which should be stable. The prefix is not returned by this method. When later passing in the full token, the prefix should prepend the returned token without any separator. 
     * @param {module:api/ClientsApi~activateClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivateClientResult}
     */
    this.activateClient = function(code, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code == undefined || code == null) {
        throw new Error("Missing the required parameter 'code' when calling activateClient");
      }


      var pathParams = {
      };
      var queryParams = {
        'code': code,
        'prefix': opts['prefix']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ActivateClientResult;

      return this.apiClient.callApi(
        '/clients/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listClientTypesForUser operation.
     * @callback module:api/ClientsApi~listClientTypesForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserClientTypePermissions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of access clients types for an user
     * Returns the access client types for a given user that the authenticated user has access. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {String} opts.channel If a channel id or internal name is specified, will only list access client types that can be used to access that channel 
     * @param {module:api/ClientsApi~listClientTypesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserClientTypePermissions>}
     */
    this.listClientTypesForUser = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling listClientTypesForUser");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'channel': opts['channel']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserClientTypePermissions];

      return this.apiClient.callApi(
        '/{user}/client-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignClient operation.
     * @callback module:api/ClientsApi~unassignClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassign (disconnects) an access client
     * Unassigns an access client by id or token. It must be currently assigned. After this call, the client can be assigned again if needed. 
     * @param {String} key The access client id or token
     * @param {Object} opts Optional parameters
     * @param {String} opts.confirmationPassword The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
     * @param {module:api/ClientsApi~unassignClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unassignClient = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling unassignClient");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
        'confirmationPassword': opts['confirmationPassword']
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/clients/{key}/unassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewClient operation.
     * @callback module:api/ClientsApi~viewClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of an access client
     * Returns the access client details, together with permissions 
     * @param {String} key The access client id or token
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/ClientsApi~viewClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientView}
     */
    this.viewClient = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling viewClient");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ClientView;

      return this.apiClient.callApi(
        '/clients/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
