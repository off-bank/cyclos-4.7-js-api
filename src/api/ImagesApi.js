/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConflictError', 'model/Error', 'model/ForbiddenError', 'model/Image', 'model/ImageView', 'model/ImagesListData', 'model/NotFoundError', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ConflictError'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/Image'), require('../model/ImageView'), require('../model/ImagesListData'), require('../model/NotFoundError'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.ImagesApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ConflictError, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.Image, root.Cyclos471Api.ImageView, root.Cyclos471Api.ImagesListData, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, ConflictError, Error, ForbiddenError, Image, ImageView, ImagesListData, NotFoundError, UnauthorizedError) {
  'use strict';

  /**
   * Images service.
   * @module api/ImagesApi
   * @version 4.7.1
   */

  /**
   * Constructs a new ImagesApi. 
   * @alias module:api/ImagesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteImage operation.
     * @callback module:api/ImagesApi~deleteImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an image by id
     * Removes the image with the given internal id. Any image kind can be removed using this operation, but the authenticated user needs the appropriate permission to do so.  
     * @param {String} id The object identification
     * @param {module:api/ImagesApi~deleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteImage = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImage");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/images/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdImagesListData operation.
     * @callback module:api/ImagesApi~getAdImagesListDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesListData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the images of an advertisement, plus additional permissions and data  
     * Returns the images of an advertisement. Additional data, such as the maximum images and whether the images can be managed by the authenticated user are also returned. 
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/ImagesApi~getAdImagesListDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesListData}
     */
    this.getAdImagesListData = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getAdImagesListData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ImagesListData;

      return this.apiClient.callApi(
        '/marketplace/{id}/images/list-data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContent operation.
     * @callback module:api/ImagesApi~getImageContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an image content
     * Returns the content of an image, given the image kind and key. When neither &#x60;width&#x60; nor &#x60;height&#x60; are specified, returns the original content. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.  
     * @param {module:model/String} kind Determines the kind of an image Possible values are: * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * userCustom: User custom images are additional images that can be used on rich text contents. * systemCustom: System custom images are additional images an administrator that can be used on rich text contents. * ad: Advertisement images are associated with an advertisement, be it simple or for web shop. * temp: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement). 
     * @param {String} file The file name. This is not the original uploaded file name, but a generated one. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.width The requested image width
     * @param {Number} opts.height The requested file height
     * @param {module:api/ImagesApi~getImageContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getImageContent = function(kind, file, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'kind' is set
      if (kind == undefined || kind == null) {
        throw new Error("Missing the required parameter 'kind' when calling getImageContent");
      }

      // verify the required parameter 'file' is set
      if (file == undefined || file == null) {
        throw new Error("Missing the required parameter 'file' when calling getImageContent");
      }


      var pathParams = {
        'kind': kind,
        'file': file
      };
      var queryParams = {
        'width': opts['width'],
        'height': opts['height']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'image/jpeg', 'image/gif', 'image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/images/{kind}/{file}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserImagesListData operation.
     * @callback module:api/ImagesApi~getUserImagesListDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesListData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns either &#x60;profile&#x60; or &#x60;custom&#x60; images for a given user, plus additional permissions and data  
     * Returns either &#x60;profile&#x60; or &#x60;custom&#x60; images for the given user. For &#x60;profile&#x60;, the user  must be visible by the authenticated user. For &#x60;custom&#x60;, the authenticated user must either be the owner or a manager (administrator or broker). Additional data, such as the maximum images and whether the images can be managed by the authenticated user are also returned. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:model/String} opts.kind The kind of images to be returned.   The default value is &#x60;profile&#x60; Possible values are: * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * custom: User custom images are additional images that can be used on rich text contents. 
     * @param {module:api/ImagesApi~getUserImagesListDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesListData}
     */
    this.getUserImagesListData = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getUserImagesListData");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'kind': opts['kind']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ImagesListData;

      return this.apiClient.callApi(
        '/{user}/images/list-data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAdImages operation.
     * @callback module:api/ImagesApi~listAdImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the images of an advertisement 
     * Returns the images of an advertisement. 
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/ImagesApi~listAdImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    this.listAdImages = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling listAdImages");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Image];

      return this.apiClient.callApi(
        '/marketplace/{id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listTempImages operation.
     * @callback module:api/ImagesApi~listTempImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists temporary images related to the currently authenticated user or guest 
     * Returns all uploaded temporary images by the current user, or guest, matching by IP address. Cyclos may be configured to allow sessions from any IP address. In this case it might be possible that images uploaded as guest by the same client are not returned. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/ImagesApi~listTempImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    this.listTempImages = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Image];

      return this.apiClient.callApi(
        '/images/temp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserImages operation.
     * @callback module:api/ImagesApi~listUserImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists either &#x60;profile&#x60; or &#x60;custom&#x60; images for a given user  
     * Returns either &#x60;profile&#x60; or &#x60;custom&#x60; images for the given user. For &#x60;profile&#x60;, the user  must be visible by the authenticated user. For &#x60;custom&#x60;, the authenticated user must either be the owner or a manager (administrator or broker). 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:model/String} opts.kind The kind of images to be returned.   The default value is &#x60;profile&#x60; Possible values are: * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * custom: User custom images are additional images that can be used on rich text contents. 
     * @param {module:api/ImagesApi~listUserImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    this.listUserImages = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling listUserImages");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'kind': opts['kind']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Image];

      return this.apiClient.callApi(
        '/{user}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderAdImages operation.
     * @callback module:api/ImagesApi~reorderAdImagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the order of the images of an advertisement  
     * The new order is defined by the list of ids, so that images appear in the same order as the ids. 
     * @param {String} id The object identification
     * @param {Array.<String>} ids The array of ids (comma-separated) reflecting the desired order
     * @param {module:api/ImagesApi~reorderAdImagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reorderAdImages = function(id, ids, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling reorderAdImages");
      }

      // verify the required parameter 'ids' is set
      if (ids == undefined || ids == null) {
        throw new Error("Missing the required parameter 'ids' when calling reorderAdImages");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/marketplace/{id}/images/order', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderProfileImages operation.
     * @callback module:api/ImagesApi~reorderProfileImagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the order of an user&#39;s profile images  
     * The new order is defined by the list of ids, so that images appear in the same order as the ids. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Array.<String>} ids The array of ids (comma-separated) reflecting the desired order
     * @param {module:api/ImagesApi~reorderProfileImagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reorderProfileImages = function(user, ids, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling reorderProfileImages");
      }

      // verify the required parameter 'ids' is set
      if (ids == undefined || ids == null) {
        throw new Error("Missing the required parameter 'ids' when calling reorderProfileImages");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{user}/images/order', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAdImage operation.
     * @callback module:api/ImagesApi~uploadAdImageCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new image for the given advertisement. 
     * Uploads a new image for the given advertisement. 
     * @param {String} id The object identification
     * @param {File} image The image being uploaded
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name for the new image. If not informed will fall back to the original file name in the form data 
     * @param {module:api/ImagesApi~uploadAdImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.uploadAdImage = function(id, image, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling uploadAdImage");
      }

      // verify the required parameter 'image' is set
      if (image == undefined || image == null) {
        throw new Error("Missing the required parameter 'image' when calling uploadAdImage");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
        'image': image
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/marketplace/{id}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadTempImage operation.
     * @callback module:api/ImagesApi~uploadTempImageCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new temporary image for the currently authenticated user or guest. 
     * Uploads a new temporary image. Those images can later be related to a new user registration or advertisement, so they will have images the beginning. Temporary images won&#39;t be immediately associated to the next registered entity, but each id must be explicitly associated on the &#x60;images&#x60; field. Images as guest can only be uploaded if on the destination group products the image profile field is allowed at registrations. Users may upload images if they can register new users or create advertisements. 
     * @param {File} image The image being uploaded
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name for the new image. If not informed will fall back to the original file name in the form data 
     * @param {module:api/ImagesApi~uploadTempImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.uploadTempImage = function(image, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'image' is set
      if (image == undefined || image == null) {
        throw new Error("Missing the required parameter 'image' when calling uploadTempImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
        'image': image
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/images/temp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadUserImage operation.
     * @callback module:api/ImagesApi~uploadUserImageCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new image for the given user. The image kind is either  &#x60;profile&#x60; or &#x60;custom&#x60;. 
     * Uploads a new image, either &#x60;profile&#x60; (by default) or &#x60;custom&#x60;, for the given user. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {File} image The image being uploaded
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.kind The kind of images to be returned.   The default value is &#x60;profile&#x60; Possible values are: * profile: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. * custom: User custom images are additional images that can be used on rich text contents. 
     * @param {String} opts.name The name for the new image. If not informed will fall back to the original file name in the form data 
     * @param {module:api/ImagesApi~uploadUserImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.uploadUserImage = function(user, image, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling uploadUserImage");
      }

      // verify the required parameter 'image' is set
      if (image == undefined || image == null) {
        throw new Error("Missing the required parameter 'image' when calling uploadUserImage");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'kind': opts['kind'],
        'name': opts['name']
      };
      var headerParams = {
      };
      var formParams = {
        'image': image
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/{user}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewImage operation.
     * @callback module:api/ImagesApi~viewImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an image details by id
     * Returns metadata about an image given its id
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/ImagesApi~viewImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageView}
     */
    this.viewImage = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling viewImage");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ImageView;

      return this.apiClient.callApi(
        '/images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
