/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdDataForEdit', 'model/AdDataForNew', 'model/AdDataForSearch', 'model/AdEdit', 'model/AdNew', 'model/AdResult', 'model/AdView', 'model/BigDecimal', 'model/ConflictError', 'model/Error', 'model/ForbiddenError', 'model/InputError', 'model/NotFoundError', 'model/UnauthorizedError', 'model/UserAdDataForSearch'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdDataForEdit'), require('../model/AdDataForNew'), require('../model/AdDataForSearch'), require('../model/AdEdit'), require('../model/AdNew'), require('../model/AdResult'), require('../model/AdView'), require('../model/BigDecimal'), require('../model/ConflictError'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/InputError'), require('../model/NotFoundError'), require('../model/UnauthorizedError'), require('../model/UserAdDataForSearch'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.MarketplaceApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.AdDataForEdit, root.Cyclos471Api.AdDataForNew, root.Cyclos471Api.AdDataForSearch, root.Cyclos471Api.AdEdit, root.Cyclos471Api.AdNew, root.Cyclos471Api.AdResult, root.Cyclos471Api.AdView, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.ConflictError, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.InputError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError, root.Cyclos471Api.UserAdDataForSearch);
  }
}(this, function(ApiClient, AdDataForEdit, AdDataForNew, AdDataForSearch, AdEdit, AdNew, AdResult, AdView, BigDecimal, ConflictError, Error, ForbiddenError, InputError, NotFoundError, UnauthorizedError, UserAdDataForSearch) {
  'use strict';

  /**
   * Marketplace service.
   * @module api/MarketplaceApi
   * @version 4.7.1
   */

  /**
   * Constructs a new MarketplaceApi. 
   * @alias module:api/MarketplaceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAd operation.
     * @callback module:api/MarketplaceApi~createAdCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new advertisement for the given user
     * Creates a new advertisement for the given user 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {module:model/AdNew} advertisement The advertisement to be created
     * @param {module:api/MarketplaceApi~createAdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.createAd = function(user, advertisement, callback) {
      var postBody = advertisement;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling createAd");
      }

      // verify the required parameter 'advertisement' is set
      if (advertisement == undefined || advertisement == null) {
        throw new Error("Missing the required parameter 'advertisement' when calling createAd");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/{user}/marketplace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAd operation.
     * @callback module:api/MarketplaceApi~deleteAdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an advertisement
     * Removes an advertisement
     * @param {String} id The object identification
     * @param {module:api/MarketplaceApi~deleteAdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAd = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAd");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/marketplace/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdDataForEdit operation.
     * @callback module:api/MarketplaceApi~getAdDataForEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdDataForEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for editing an advertisement
     * Returns configuration data which can be used to edit an advertisement 
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/MarketplaceApi~getAdDataForEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdDataForEdit}
     */
    this.getAdDataForEdit = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getAdDataForEdit");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdDataForEdit;

      return this.apiClient.callApi(
        '/marketplace/{id}/data-for-edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdDataForNew operation.
     * @callback module:api/MarketplaceApi~getAdDataForNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdDataForNew} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for creating a new advertisement for an user and kind 
     * Returns data for creating a new advertisement for the given user. The &#x60;kind&#x60; should be informed. If not set, &#x60;simple&#x60; is assumed. Currently only &#x60;simple&#x60; advertisements can be created through this API.       
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:model/String} opts.kind The possible kinds of an advertisement Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an web-shop. Can be bought, there is stock management, etc. 
     * @param {module:api/MarketplaceApi~getAdDataForNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdDataForNew}
     */
    this.getAdDataForNew = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getAdDataForNew");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'kind': opts['kind']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdDataForNew;

      return this.apiClient.callApi(
        '/{user}/marketplace/data-for-new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdDataForSearch operation.
     * @callback module:api/MarketplaceApi~getAdDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration data to search advertisements
     * Returns data needed on for a general advertisements search  
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:model/String} opts.kind Indicates the kind of advertisement that should be searched. When nothing is passed (default) all kinds will be searched. Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an web-shop. Can be bought, there is stock management, etc. 
     * @param {Boolean} opts.brokered If the authenticated is a broker, passing the &#x60;true&#x60; value will indicate the advertisements to be searched are from managed users of that broker. The default is &#x60;false&#x60;. 
     * @param {module:api/MarketplaceApi~getAdDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdDataForSearch}
     */
    this.getAdDataForSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'kind': opts['kind'],
        'brokered': opts['brokered']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdDataForSearch;

      return this.apiClient.callApi(
        '/marketplace/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAdDataForSearch operation.
     * @callback module:api/MarketplaceApi~getUserAdDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAdDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration data for searching advertisements of an user
     * Returns data needed on for a user&#39;s advertisements search  
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:model/String} opts.kind Indicates the kind of advertisement that should be searched. When nothing is passed (default) all kinds will be searched. Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an web-shop. Can be bought, there is stock management, etc. 
     * @param {module:api/MarketplaceApi~getUserAdDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAdDataForSearch}
     */
    this.getUserAdDataForSearch = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getUserAdDataForSearch");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'kind': opts['kind']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserAdDataForSearch;

      return this.apiClient.callApi(
        '/{user}/marketplace/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAds operation.
     * @callback module:api/MarketplaceApi~searchAdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for advertisements
     * Returns a page of advertisements that match a given criteria 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {String} opts.category Either id or internal name of a category
     * @param {String} opts.currency Either id or internal name of a currency for the price
     * @param {Array.<module:model/BigDecimal>} opts.priceRange The minumum / maximum price. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Boolean} opts.hasImages When set to &#x60;true&#x60; only advertisements with images are returned 
     * @param {Array.<Date>} opts.publicationPeriod The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.expirationPeriod The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {module:model/String} opts.kind The possible kinds of an advertisement Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an web-shop. Can be bought, there is stock management, etc. 
     * @param {Array.<module:model/String>} opts.statuses The possible status for an advertisement Possible values for each array element are: * draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations. * pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations. * active: The advertisement is published and can be seen by other users. * scheduled: The advertisement has a future publication period, and cannot be seen by other users.  * expired: The advertisement publication period has already expired, and cannot be seen by other users. * hidden: The advertisement is manually hidden from other users * disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users. 
     * @param {module:model/String} opts.orderBy Indicates how advertisements results are ordered. Possible values are: * relevance: This is the default if keywords are used. Best matching advertisements come first. * date: Newest advertisements are returned first. * priceAsc: Smaller prices are returned first. Advertisements without price are returned last. * priceDesc: Higher prices are returned first. Advertisements without price are returned last. * distance: Only useful when providing a location, will return nearer advertisements first. * random: Without definite order 
     * @param {Number} opts.latitude The reference latitude for distance searches
     * @param {Number} opts.longitude The reference longitude for distance searches
     * @param {Number} opts.maxDistance Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both &#x60;longitude&#x60; and &#x60;latitude&#x60; parameters are passed with the actual reference position. 
     * @param {module:model/String} opts.addressResult Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * none: Addresses are not returned. * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (&#x60;latitude&#x60; and &#x60;longitude&#x60;) * primary: The primary (default) address is returned 
     * @param {String} opts.owner Either id or an identification, such as login name, e-mail, etc, for the advertisement owner. The allowed identification methods are those the authenticated user can use on keywords search. 
     * @param {String} opts.broker Either id or an identification, such as login name, e-mail, etc, for the broker of the advertisement owner. The allowed identification methods are those the authenticated user can use on keywords search. 
     * @param {Array.<String>} opts.groups Array of either id or internal names of user groups the advertisement owner must belong to 
     * @param {Boolean} opts.returnEditable Whether to return the editable property. Passing &#x60;true&#x60; will impact the performance a bit, as for each returned advertisement some statuses and permissions need to be checked.  
     * @param {module:api/MarketplaceApi~searchAdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdResult>}
     */
    this.searchAds = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'category': opts['category'],
        'currency': opts['currency'],
        'priceRange': this.apiClient.buildCollectionParam(opts['priceRange'], 'csv'),
        'hasImages': opts['hasImages'],
        'publicationPeriod': this.apiClient.buildCollectionParam(opts['publicationPeriod'], 'csv'),
        'expirationPeriod': this.apiClient.buildCollectionParam(opts['expirationPeriod'], 'csv'),
        'kind': opts['kind'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'orderBy': opts['orderBy'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'maxDistance': opts['maxDistance'],
        'addressResult': opts['addressResult'],
        'owner': opts['owner'],
        'broker': opts['broker'],
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'returnEditable': opts['returnEditable']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AdResult];

      return this.apiClient.callApi(
        '/marketplace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUserAds operation.
     * @callback module:api/MarketplaceApi~searchUserAdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for advertisements of a specific user
     * Returns a page of advertisements that match a given criteria for a given user. Equivallent to calling &#x60;GET /marketplace?owner&#x3D;{user}&#x60; 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {String} opts.category Either id or internal name of a category
     * @param {String} opts.currency Either id or internal name of a currency for the price
     * @param {Array.<module:model/BigDecimal>} opts.priceRange The minumum / maximum price. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Boolean} opts.hasImages When set to &#x60;true&#x60; only advertisements with images are returned 
     * @param {Array.<Date>} opts.publicationPeriod The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.expirationPeriod The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {module:model/String} opts.kind The possible kinds of an advertisement Possible values are: * simple: A simple advertisement that can be viewed, but not directly bought * webshop: An advertisement that is part of an web-shop. Can be bought, there is stock management, etc. 
     * @param {Array.<module:model/String>} opts.statuses The possible status for an advertisement Possible values for each array element are: * draft: In draft status, only the owner can see and edit the advertisement. This status is only possible if the system is configured to require authorizations. * pending: The advertisement is pending for an authorization and cannot be seen by other users. This status is only possible if the system is configured to require authorizations. * active: The advertisement is published and can be seen by other users. * scheduled: The advertisement has a future publication period, and cannot be seen by other users.  * expired: The advertisement publication period has already expired, and cannot be seen by other users. * hidden: The advertisement is manually hidden from other users * disabled: The advertisement is disabled because the owner no longer has access to the currency of the advertisement. It cannot be seen by other users. 
     * @param {module:model/String} opts.orderBy Indicates how advertisements results are ordered. Possible values are: * relevance: This is the default if keywords are used. Best matching advertisements come first. * date: Newest advertisements are returned first. * priceAsc: Smaller prices are returned first. Advertisements without price are returned last. * priceDesc: Higher prices are returned first. Advertisements without price are returned last. * distance: Only useful when providing a location, will return nearer advertisements first. * random: Without definite order 
     * @param {Number} opts.latitude The reference latitude for distance searches
     * @param {Number} opts.longitude The reference longitude for distance searches
     * @param {Number} opts.maxDistance Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both &#x60;longitude&#x60; and &#x60;latitude&#x60; parameters are passed with the actual reference position. 
     * @param {module:model/String} opts.addressResult Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * none: Addresses are not returned. * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (&#x60;latitude&#x60; and &#x60;longitude&#x60;) * primary: The primary (default) address is returned 
     * @param {module:api/MarketplaceApi~searchUserAdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdResult>}
     */
    this.searchUserAds = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling searchUserAds");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'category': opts['category'],
        'currency': opts['currency'],
        'priceRange': this.apiClient.buildCollectionParam(opts['priceRange'], 'csv'),
        'hasImages': opts['hasImages'],
        'publicationPeriod': this.apiClient.buildCollectionParam(opts['publicationPeriod'], 'csv'),
        'expirationPeriod': this.apiClient.buildCollectionParam(opts['expirationPeriod'], 'csv'),
        'kind': opts['kind'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'orderBy': opts['orderBy'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'maxDistance': opts['maxDistance'],
        'addressResult': opts['addressResult']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AdResult];

      return this.apiClient.callApi(
        '/{user}/marketplace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAd operation.
     * @callback module:api/MarketplaceApi~updateAdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing ad
     * Updates an existing ad
     * @param {String} id The object identification
     * @param {module:model/AdEdit} ad The advertisement to be edited
     * @param {module:api/MarketplaceApi~updateAdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAd = function(id, ad, callback) {
      var postBody = ad;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateAd");
      }

      // verify the required parameter 'ad' is set
      if (ad == undefined || ad == null) {
        throw new Error("Missing the required parameter 'ad' when calling updateAd");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/marketplace/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewAd operation.
     * @callback module:api/MarketplaceApi~viewAdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of an advertisement
     * Returns detailed information of a marketplace 
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/MarketplaceApi~viewAdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdView}
     */
    this.viewAd = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling viewAd");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdView;

      return this.apiClient.callApi(
        '/marketplace/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
