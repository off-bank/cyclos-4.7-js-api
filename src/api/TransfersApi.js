/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/PaymentError', 'model/Transfer', 'model/TransferDataForSearch', 'model/TransferView', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BigDecimal'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/PaymentError'), require('../model/Transfer'), require('../model/TransferDataForSearch'), require('../model/TransferView'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.TransfersApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.PaymentError, root.Cyclos471Api.Transfer, root.Cyclos471Api.TransferDataForSearch, root.Cyclos471Api.TransferView, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, BigDecimal, Error, ForbiddenError, NotFoundError, PaymentError, Transfer, TransferDataForSearch, TransferView, UnauthorizedError) {
  'use strict';

  /**
   * Transfers service.
   * @module api/TransfersApi
   * @version 4.7.1
   */

  /**
   * Constructs a new TransfersApi. 
   * @alias module:api/TransfersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the chargebackTransfer operation.
     * @callback module:api/TransfersApi~chargebackTransferCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform the chargeback of a transfer
     * The chargeback generates a new transaction with &#x60;kind&#x60; &#x3D; &#x60;chargeback&#x60;. A new transfer is generated with the same from / to, and negative amount. This will effectively return the amount to the original account. Only top-level transfers can be charged back. For example, a transfer used to charge a fee cannot be charged back. Also, the hability to chargeback a transfer depends on permissions and configuration like the maximum allowed time for the chargeback.  
     * @param {String} key Either the id or transaction number
     * @param {Object} opts Optional parameters
     * @param {String} opts.confirmationPassword The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
     * @param {module:api/TransfersApi~chargebackTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.chargebackTransfer = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling chargebackTransfer");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
        'confirmationPassword': opts['confirmationPassword']
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/transfers/{key}/chargeback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferDataForSearch operation.
     * @callback module:api/TransfersApi~getTransferDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching transfers over multiple accounts
     * Returns configuration data for searching transfers over multiple accounts. This operation can only be performed by administrators or brokers over managed users. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/TransfersApi~getTransferDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferDataForSearch}
     */
    this.getTransferDataForSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransferDataForSearch;

      return this.apiClient.callApi(
        '/transfers/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTransfers operation.
     * @callback module:api/TransfersApi~searchTransfersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transfer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for transfers over multiple accounts
     * Searches for transfers over multiple accounts. This operation can only be performed by administrators or brokers over managed users. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Array.<Date>} opts.datePeriod The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.transferFilters Reference to the transfer filters, which filters transfers by type. 
     * @param {String} opts.transactionNumber The transaction number of the matching transfer 
     * @param {String} opts.user Reference an user that should have either received / performed the transfer. 
     * @param {Array.<String>} opts.groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {String} opts.by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
     * @param {String} opts.broker Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.excludedIds List of transfers ids to be excluded from the result. 
     * @param {Array.<String>} opts.accessClients References to access clients used to perform / receive the transfer 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {Array.<String>} opts.statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. 
     * @param {Array.<module:model/BigDecimal>} opts.amountRange The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<module:model/String>} opts.transferKinds Indicates the reason the transfer was created Possible values for each array element are: * payment: A transfer generated by a direct payment or accepting a webshop order * scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment * recurringPayment: A transfer generated when processing a recurring payment * chargeback: A transfer which is a chargeback of another transfer * initialCredit: A transfer which is the initial credit for a newly created account * transferFee: A transfer generated by a transfer fee charge * accountFee: A transfer generated by an account fee charge * import: An imported transfer 
     * @param {Boolean} opts.chargedBack When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to false, will only return transfers that were not charged-back. When left blank will not filter by this creterion. 
     * @param {String} opts.currency Either id or internal name of the currency
     * @param {String} opts.fromAccountType Either id or internal name of the origin account type
     * @param {String} opts.toAccountType Either id or internal name of the destination account type
     * @param {module:model/String} opts.orderBy Contains the possible &#39;order by&#39; values when searching for transfers  Possible values are: * dateAsc: The result is ordered by date ascendant * dateDesc: The result is ordered by date descendant * amountAsc: The result is ordered by amount descendant * amountDesc: The result is ordered by amount descendant 
     * @param {module:api/TransfersApi~searchTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transfer>}
     */
    this.searchTransfers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'datePeriod': this.apiClient.buildCollectionParam(opts['datePeriod'], 'csv'),
        'transferFilters': this.apiClient.buildCollectionParam(opts['transferFilters'], 'csv'),
        'transactionNumber': opts['transactionNumber'],
        'user': opts['user'],
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'by': opts['by'],
        'broker': opts['broker'],
        'channels': this.apiClient.buildCollectionParam(opts['channels'], 'csv'),
        'excludedIds': this.apiClient.buildCollectionParam(opts['excludedIds'], 'csv'),
        'accessClients': this.apiClient.buildCollectionParam(opts['accessClients'], 'csv'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'amountRange': this.apiClient.buildCollectionParam(opts['amountRange'], 'csv'),
        'transferKinds': this.apiClient.buildCollectionParam(opts['transferKinds'], 'csv'),
        'chargedBack': opts['chargedBack'],
        'currency': opts['currency'],
        'fromAccountType': opts['fromAccountType'],
        'toAccountType': opts['toAccountType'],
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Transfer];

      return this.apiClient.callApi(
        '/transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewTransfer operation.
     * @callback module:api/TransfersApi~viewTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about a transfer
     * Returns details about a transfer.
     * @param {String} key Either the id or transaction number
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/TransfersApi~viewTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferView}
     */
    this.viewTransfer = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling viewTransfer");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransferView;

      return this.apiClient.callApi(
        '/transfers/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
