/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChangePassword', 'model/DataForUserPasswords', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/PasswordStatusAndPermissions', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChangePassword'), require('../model/DataForUserPasswords'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/PasswordStatusAndPermissions'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.PasswordsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.ChangePassword, root.Cyclos471Api.DataForUserPasswords, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.PasswordStatusAndPermissions, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, ChangePassword, DataForUserPasswords, Error, ForbiddenError, NotFoundError, PasswordStatusAndPermissions, UnauthorizedError) {
  'use strict';

  /**
   * Passwords service.
   * @module api/PasswordsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new PasswordsApi. 
   * @alias module:api/PasswordsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/PasswordsApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes a manual password
     * Changes a manual password of the given user. When the user is changing his own password he needs to pass in the &#x60;oldPassword&#x60; as well. When an adminitrator / broker is changing the password of a managed user, he/she can optionally force the password change on next login.   
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} type Either the id or internal name of the password type
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePassword} opts.params The parameters for password change
     * @param {module:api/PasswordsApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changePassword = function(user, type, opts, callback) {
      opts = opts || {};
      var postBody = opts['params'];

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling changePassword");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling changePassword");
      }


      var pathParams = {
        'user': user,
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{user}/passwords/{type}/change', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disablePassword operation.
     * @callback module:api/PasswordsApi~disablePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables a password, making it unusable until manually re-enabled
     * Disables a password. It cannot be used again until enabled again. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} type Either the id or internal name of the password type
     * @param {module:api/PasswordsApi~disablePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.disablePassword = function(user, type, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling disablePassword");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling disablePassword");
      }


      var pathParams = {
        'user': user,
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{user}/passwords/{type}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enablePassword operation.
     * @callback module:api/PasswordsApi~enablePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-enables a disabled a password
     * Re-enables a password that was previously disabled. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} type Either the id or internal name of the password type
     * @param {module:api/PasswordsApi~enablePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.enablePassword = function(user, type, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling enablePassword");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling enablePassword");
      }


      var pathParams = {
        'user': user,
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{user}/passwords/{type}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePassword operation.
     * @callback module:api/PasswordsApi~generatePasswordCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates the value of a generated password for the first time
     * Generates the value of a password whose type&#39;s &#x60;mode&#x60; is  &#x60;generated&#x60;. Only the password owner can perform   this operation, and only in one of these conditions:   - If the password &#x60;status&#x60; is &#x60;neverCreated&#x60;     it can only be generated if the password doesn&#39;t require the     administrator authorization to generate. This can be configured in     the password type.   - The password can be generated if its &#x60;status&#x60; is one of the     following: &#x60;pending&#x60;,      &#x60;expired&#x60; or &#x60;reset&#x60;. 
     * @param {String} type Either the id or internal name of the password type
     * @param {module:api/PasswordsApi~generatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.generatePassword = function(type, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling generatePassword");
      }


      var pathParams = {
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/passwords/{type}/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPasswordsListData operation.
     * @callback module:api/PasswordsApi~getUserPasswordsListDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForUserPasswords} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status for each passwords the given user have
     * Returns the passwords, with their statuses, for a given user. Also, permissions on which operations are enabled are also returned. It is also returned additional data, such as the confirmation password input in case some action is needed 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/PasswordsApi~getUserPasswordsListDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForUserPasswords}
     */
    this.getUserPasswordsListData = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getUserPasswordsListData");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForUserPasswords;

      return this.apiClient.callApi(
        '/{user}/passwords/list-data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserPasswords operation.
     * @callback module:api/PasswordsApi~listUserPasswordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PasswordStatusAndPermissions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status for each passwords the given user have
     * Returns the passwords, with their statuses, for a given user. Also, permissions on which operations are enabled are also returned. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/PasswordsApi~listUserPasswordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PasswordStatusAndPermissions>}
     */
    this.listUserPasswords = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling listUserPasswords");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PasswordStatusAndPermissions];

      return this.apiClient.callApi(
        '/{user}/passwords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAndSendPassword operation.
     * @callback module:api/PasswordsApi~resetAndSendPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new value for a manual password and send it to the user via e-mail  
     * Resets a manual password to a generated value and send it to the user.   Can also be used to reset and send the main channel&#39;s access password if it   is generated. The new password is initially expired, so the user needs   to change it on first login. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} type Either the id or internal name of the password type
     * @param {module:api/PasswordsApi~resetAndSendPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetAndSendPassword = function(user, type, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling resetAndSendPassword");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling resetAndSendPassword");
      }


      var pathParams = {
        'user': user,
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{user}/passwords/{type}/reset-and-send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback module:api/PasswordsApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets a generated password, allowing it to be generated again
     * Resets a generated password. This can only be done by administrators / brokers over managed users, and allow them to generate the password value again. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} type Either the id or internal name of the password type
     * @param {module:api/PasswordsApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetPassword = function(user, type, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling resetPassword");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling resetPassword");
      }


      var pathParams = {
        'user': user,
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{user}/passwords/{type}/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unblockPassword operation.
     * @callback module:api/PasswordsApi~unblockPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblocks a password that has been blocked by exceeding the wrong tries  
     * The password is unblocked if its status is either  &#x60;temporarilyBlocked&#x60; or &#x60;indefinitelyBlocked&#x60;. 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} type Either the id or internal name of the password type
     * @param {module:api/PasswordsApi~unblockPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unblockPassword = function(user, type, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling unblockPassword");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling unblockPassword");
      }


      var pathParams = {
        'user': user,
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{user}/passwords/{type}/unblock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
