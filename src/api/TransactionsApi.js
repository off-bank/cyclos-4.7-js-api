/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/TransactionDataForSearch', 'model/TransactionResult', 'model/TransactionView', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/TransactionDataForSearch'), require('../model/TransactionResult'), require('../model/TransactionView'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.TransactionsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.TransactionDataForSearch, root.Cyclos471Api.TransactionResult, root.Cyclos471Api.TransactionView, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, Error, ForbiddenError, NotFoundError, TransactionDataForSearch, TransactionResult, TransactionView, UnauthorizedError) {
  'use strict';

  /**
   * Transactions service.
   * @module api/TransactionsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new TransactionsApi. 
   * @alias module:api/TransactionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTransactionsDataForSearch operation.
     * @callback module:api/TransactionsApi~getTransactionsDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching transactions of an account owner
     * Returns data which can be used to filter a transaction search
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/TransactionsApi~getTransactionsDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionDataForSearch}
     */
    this.getTransactionsDataForSearch = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling getTransactionsDataForSearch");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionDataForSearch;

      return this.apiClient.callApi(
        '/{owner}/transactions/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTransactions operation.
     * @callback module:api/TransactionsApi~searchTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches transactions of an account owner
     * Returns the transactions of a given account owner that match the specified criteria. Each result will will be relative to this owner. The amount may be positive or negative, depending on whether this owner has performed or received the transaction. 
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {Array.<String>} opts.accountTypes The account types
     * @param {Array.<Date>} opts.datePeriod The minimum / maximum transaction date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {String} opts.transactionNumber The transaction number of the matching transfer 
     * @param {String} opts.user Reference an user that should have either received / performed the transfer. 
     * @param {Array.<String>} opts.groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {String} opts.by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
     * @param {String} opts.broker Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.accessClients References to access clients used to perform / receive the transfer 
     * @param {Array.<module:model/String>} opts.kinds The kind of a transaction  Possible values for each array element are: * payment: A direct payment * recurringPayment: A payment which is processed again periodically * scheduledPayment: A scheduled payment which is either a payment scheduled for a future date or has multiple installments * paymentRequest: A request for another user to accept a payment  * externalPayment: A payment to an external user * chargeback: Chargeback of a given transfer * import: An imported transaction * order: Transaction generated by confirming an order 
     * @param {module:api/TransactionsApi~searchTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionResult>}
     */
    this.searchTransactions = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling searchTransactions");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'accountTypes': this.apiClient.buildCollectionParam(opts['accountTypes'], 'csv'),
        'datePeriod': this.apiClient.buildCollectionParam(opts['datePeriod'], 'csv'),
        'transactionNumber': opts['transactionNumber'],
        'user': opts['user'],
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'by': opts['by'],
        'broker': opts['broker'],
        'channels': this.apiClient.buildCollectionParam(opts['channels'], 'csv'),
        'accessClients': this.apiClient.buildCollectionParam(opts['accessClients'], 'csv'),
        'kinds': this.apiClient.buildCollectionParam(opts['kinds'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TransactionResult];

      return this.apiClient.callApi(
        '/{owner}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewTransaction operation.
     * @callback module:api/TransactionsApi~viewTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about a transaction
     * Returns details about a transaction.
     * @param {String} key Either the id or transaction number
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/TransactionsApi~viewTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionView}
     */
    this.viewTransaction = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling viewTransaction");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionView;

      return this.apiClient.callApi(
        '/transactions/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
