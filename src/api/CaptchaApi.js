/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.CaptchaApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, Error, ForbiddenError, NotFoundError, UnauthorizedError) {
  'use strict';

  /**
   * Captcha service.
   * @module api/CaptchaApi
   * @version 4.7.1
   */

  /**
   * Constructs a new CaptchaApi. 
   * @alias module:api/CaptchaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCaptchaContent operation.
     * @callback module:api/CaptchaApi~getCaptchaContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a captcha image content
     * Returns the image content of a captcha text. When neither &#x60;width&#x60; nor &#x60;height&#x60; are specified, returns the original size. The original ratio is always maintained. When only of one of  the dimensions is specified, it is used as maximum, and the other is calculated. When both are informed, the maximum size with the original ratio that fits both dimensions is used.  
     * @param {String} id The object identification
     * @param {Object} opts Optional parameters
     * @param {String} opts.group On public / user registration, it is possible to specify a destination group, so the captcha background image will be taken from this new group&#39;s configured theme. 
     * @param {Number} opts.width The requested image width
     * @param {Number} opts.height The requested file height
     * @param {module:api/CaptchaApi~getCaptchaContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getCaptchaContent = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getCaptchaContent");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'group': opts['group'],
        'width': opts['width'],
        'height': opts['height']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'image/jpeg', 'image/gif', 'image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/captcha/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the newCaptcha operation.
     * @callback module:api/CaptchaApi~newCaptchaCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a new captcha challenge
     * Only allowed when internal captchas are in use.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.group On public / user registration, it is possible to specify a destination group, so the captcha background image will be taken from this new group&#39;s configured theme. 
     * @param {module:api/CaptchaApi~newCaptchaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.newCaptcha = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'group': opts['group']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/captcha', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
