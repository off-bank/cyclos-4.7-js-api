/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountHistoryResult', 'model/AccountWithHistoryStatus', 'model/AccountWithStatus', 'model/BigDecimal', 'model/DataForAccountHistory', 'model/DataForUserBalancesSearch', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/UnauthorizedError', 'model/UserBalancesSummary', 'model/UserWithBalanceResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountHistoryResult'), require('../model/AccountWithHistoryStatus'), require('../model/AccountWithStatus'), require('../model/BigDecimal'), require('../model/DataForAccountHistory'), require('../model/DataForUserBalancesSearch'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/UnauthorizedError'), require('../model/UserBalancesSummary'), require('../model/UserWithBalanceResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.AccountsApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.AccountHistoryResult, root.Cyclos471Api.AccountWithHistoryStatus, root.Cyclos471Api.AccountWithStatus, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.DataForAccountHistory, root.Cyclos471Api.DataForUserBalancesSearch, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError, root.Cyclos471Api.UserBalancesSummary, root.Cyclos471Api.UserWithBalanceResult);
  }
}(this, function(ApiClient, AccountHistoryResult, AccountWithHistoryStatus, AccountWithStatus, BigDecimal, DataForAccountHistory, DataForUserBalancesSearch, Error, ForbiddenError, NotFoundError, UnauthorizedError, UserBalancesSummary, UserWithBalanceResult) {
  'use strict';

  /**
   * Accounts service.
   * @module api/AccountsApi
   * @version 4.7.1
   */

  /**
   * Constructs a new AccountsApi. 
   * @alias module:api/AccountsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAccountHistoryDataByOwnerAndType operation.
     * @callback module:api/AccountsApi~getAccountHistoryDataByOwnerAndTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForAccountHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching an account history by owner and type
     * Returns configuration data for searching entries in a specific account history, as well as status information for that account information. 
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} accountType The internal name or id of the account type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/AccountsApi~getAccountHistoryDataByOwnerAndTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForAccountHistory}
     */
    this.getAccountHistoryDataByOwnerAndType = function(owner, accountType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling getAccountHistoryDataByOwnerAndType");
      }

      // verify the required parameter 'accountType' is set
      if (accountType == undefined || accountType == null) {
        throw new Error("Missing the required parameter 'accountType' when calling getAccountHistoryDataByOwnerAndType");
      }


      var pathParams = {
        'owner': owner,
        'accountType': accountType
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForAccountHistory;

      return this.apiClient.callApi(
        '/{owner}/accounts/{accountType}/data-for-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStatusByOwnerAndType operation.
     * @callback module:api/AccountsApi~getAccountStatusByOwnerAndTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountWithHistoryStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status of an account by owner and type
     * Returns the account status for a specific account. The account type may be either the identifier or internal name. The status will contain both instant status information, that is, the same fields as &#x60;AccountStatus&#x60;, plus status that depend on the input parameters, such as those defined in &#x60;AccountWithHistoryStatus&#x60;. The actual data inside the result depend on the configuration, in the &#x60;Account status indicators&#x60; option, which is used to limit the amount of data returned. 
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} accountType The internal name or id of the account type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Array.<Date>} opts.datePeriod The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.transferFilters Reference to the transfer filters, which filters transfers by type. 
     * @param {String} opts.transactionNumber The transaction number of the matching transfer 
     * @param {String} opts.user Reference an user that should have either received / performed the transfer. 
     * @param {Array.<String>} opts.groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {String} opts.by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
     * @param {String} opts.broker Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.excludedIds List of transfers ids to be excluded from the result. 
     * @param {Array.<String>} opts.accessClients References to access clients used to perform / receive the transfer 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {Array.<String>} opts.statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. 
     * @param {Array.<module:model/BigDecimal>} opts.amountRange The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<module:model/String>} opts.transferKinds Indicates the reason the transfer was created Possible values for each array element are: * payment: A transfer generated by a direct payment or accepting a webshop order * scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment * recurringPayment: A transfer generated when processing a recurring payment * chargeback: A transfer which is a chargeback of another transfer * initialCredit: A transfer which is the initial credit for a newly created account * transferFee: A transfer generated by a transfer fee charge * accountFee: A transfer generated by an account fee charge * import: An imported transfer 
     * @param {Boolean} opts.chargedBack When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to false, will only return transfers that were not charged-back. When left blank will not filter by this creterion. 
     * @param {module:api/AccountsApi~getAccountStatusByOwnerAndTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountWithHistoryStatus}
     */
    this.getAccountStatusByOwnerAndType = function(owner, accountType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling getAccountStatusByOwnerAndType");
      }

      // verify the required parameter 'accountType' is set
      if (accountType == undefined || accountType == null) {
        throw new Error("Missing the required parameter 'accountType' when calling getAccountStatusByOwnerAndType");
      }


      var pathParams = {
        'owner': owner,
        'accountType': accountType
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'datePeriod': this.apiClient.buildCollectionParam(opts['datePeriod'], 'csv'),
        'transferFilters': this.apiClient.buildCollectionParam(opts['transferFilters'], 'csv'),
        'transactionNumber': opts['transactionNumber'],
        'user': opts['user'],
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'by': opts['by'],
        'broker': opts['broker'],
        'channels': this.apiClient.buildCollectionParam(opts['channels'], 'csv'),
        'excludedIds': this.apiClient.buildCollectionParam(opts['excludedIds'], 'csv'),
        'accessClients': this.apiClient.buildCollectionParam(opts['accessClients'], 'csv'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'amountRange': this.apiClient.buildCollectionParam(opts['amountRange'], 'csv'),
        'transferKinds': this.apiClient.buildCollectionParam(opts['transferKinds'], 'csv'),
        'chargedBack': opts['chargedBack']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountWithHistoryStatus;

      return this.apiClient.callApi(
        '/{owner}/accounts/{accountType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBalancesData operation.
     * @callback module:api/AccountsApi~getUserBalancesDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForUserBalancesSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching users together with their balances
     * Returns configuration data for searching users together with their balances. The account types are returned, and the account type needs to be passed in the other &#x60;user-balances&#x60; operations. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/AccountsApi~getUserBalancesDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForUserBalancesSearch}
     */
    this.getUserBalancesData = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForUserBalancesSearch;

      return this.apiClient.callApi(
        '/accounts/data-for-user-balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserBalancesSummary operation.
     * @callback module:api/AccountsApi~getUserBalancesSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBalancesSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns summarized information for the user balances search
     * Returns summaries for each balance level (if ranges are defined in either account type or filter), as well as the total summary. 
     * @param {String} accountType The account type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.usersToExclude Indicated the users to be excluded from the result 
     * @param {Array.<String>} opts.usersToInclude Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result. 
     * @param {Array.<Date>} opts.activationPeriod The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastLoginPeriod The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.groups Either id or internal names of groups / group sets
     * @param {Array.<String>} opts.brokers Either id or a principal (login name, e-mail, etc) for brokers
     * @param {Boolean} opts.mainBrokerOnly When set to &#x60;true&#x60;, will match only users that have the brokers as set in the &#x60;brokers&#x60; parameter as main broker.  
     * @param {Number} opts.latitude The reference latitude for distance searches
     * @param {Number} opts.longitude The reference longitude for distance searches
     * @param {Number} opts.maxDistance Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both &#x60;longitude&#x60; and &#x60;latitude&#x60; parameters are passed with the actual reference position. 
     * @param {module:model/String} opts.addressResult Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * none: Addresses are not returned. * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (&#x60;latitude&#x60; and &#x60;longitude&#x60;) * primary: The primary (default) address is returned 
     * @param {Boolean} opts.includeGroup When set to &#x60;true&#x60; and the logged user has permission to view user groups, will return the &#x60;group&#x60; property on users.  
     * @param {Boolean} opts.includeGroupSet When set to &#x60;true&#x60; and the logged user has permission to view user group sets, will return the &#x60;groupSet&#x60; property on users.  
     * @param {Array.<Number>} opts.balanceRange The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastIncomingTransferPeriod The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastOutgoingTransferPeriod The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.negativeSincePeriod The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Number>} opts.mediumBalanceRange An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won&#39;t be considered. 
     * @param {module:api/AccountsApi~getUserBalancesSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBalancesSummary}
     */
    this.getUserBalancesSummary = function(accountType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountType' is set
      if (accountType == undefined || accountType == null) {
        throw new Error("Missing the required parameter 'accountType' when calling getUserBalancesSummary");
      }


      var pathParams = {
        'accountType': accountType
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'usersToExclude': this.apiClient.buildCollectionParam(opts['usersToExclude'], 'csv'),
        'usersToInclude': this.apiClient.buildCollectionParam(opts['usersToInclude'], 'csv'),
        'activationPeriod': this.apiClient.buildCollectionParam(opts['activationPeriod'], 'csv'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv'),
        'lastLoginPeriod': this.apiClient.buildCollectionParam(opts['lastLoginPeriod'], 'csv'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'brokers': this.apiClient.buildCollectionParam(opts['brokers'], 'csv'),
        'mainBrokerOnly': opts['mainBrokerOnly'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'maxDistance': opts['maxDistance'],
        'addressResult': opts['addressResult'],
        'includeGroup': opts['includeGroup'],
        'includeGroupSet': opts['includeGroupSet'],
        'balanceRange': this.apiClient.buildCollectionParam(opts['balanceRange'], 'csv'),
        'lastIncomingTransferPeriod': this.apiClient.buildCollectionParam(opts['lastIncomingTransferPeriod'], 'csv'),
        'lastOutgoingTransferPeriod': this.apiClient.buildCollectionParam(opts['lastOutgoingTransferPeriod'], 'csv'),
        'negativeSincePeriod': this.apiClient.buildCollectionParam(opts['negativeSincePeriod'], 'csv'),
        'mediumBalanceRange': this.apiClient.buildCollectionParam(opts['mediumBalanceRange'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserBalancesSummary;

      return this.apiClient.callApi(
        '/accounts/{accountType}/user-balances/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountsByOwner operation.
     * @callback module:api/AccountsApi~listAccountsByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountWithStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists accounts of the given owner with their statuses
     * Lists all visible accounts of the given user, or system accounts if the owner &#39;system&#39; is used. Each account has status information, like the current balance, avaliable balance and so on. However, the returned data depend on the configuration, in the &#x60;Account status indicators&#x60; option, which is used to limit the amount of data returned. 
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/AccountsApi~listAccountsByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountWithStatus>}
     */
    this.listAccountsByOwner = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling listAccountsByOwner");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccountWithStatus];

      return this.apiClient.callApi(
        '/{owner}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAccountHistory operation.
     * @callback module:api/AccountsApi~searchAccountHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountHistoryResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search an account history
     * Returns a page of account history entries for a specific account, according to the given criteria 
     * @param {String} owner Either an user identification, supporting either the value &#39;self&#39; (sans quotes) for the currently authenticated user or an identification method for an user, or the value &#39;system&#39; (sans quotes) for system data. 
     * @param {String} accountType The account type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {Array.<Date>} opts.datePeriod The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.transferFilters Reference to the transfer filters, which filters transfers by type. 
     * @param {String} opts.transactionNumber The transaction number of the matching transfer 
     * @param {String} opts.user Reference an user that should have either received / performed the transfer. 
     * @param {Array.<String>} opts.groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {String} opts.by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. 
     * @param {String} opts.broker Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. 
     * @param {Array.<String>} opts.excludedIds List of transfers ids to be excluded from the result. 
     * @param {Array.<String>} opts.accessClients References to access clients used to perform / receive the transfer 
     * @param {Array.<String>} opts.customFields Custom field values used as search criteria. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, customFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. 
     * @param {Array.<String>} opts.statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. 
     * @param {Array.<module:model/BigDecimal>} opts.amountRange The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<module:model/String>} opts.transferKinds Indicates the reason the transfer was created Possible values for each array element are: * payment: A transfer generated by a direct payment or accepting a webshop order * scheduledPaymentInstallment: A transfer generated when processing a scheduled payment installment * recurringPayment: A transfer generated when processing a recurring payment * chargeback: A transfer which is a chargeback of another transfer * initialCredit: A transfer which is the initial credit for a newly created account * transferFee: A transfer generated by a transfer fee charge * accountFee: A transfer generated by an account fee charge * import: An imported transfer 
     * @param {Boolean} opts.chargedBack When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to false, will only return transfers that were not charged-back. When left blank will not filter by this creterion. 
     * @param {module:model/String} opts.orderBy Contains the possible &#39;order by&#39; values when searching for transfers  Possible values are: * dateAsc: The result is ordered by date ascendant * dateDesc: The result is ordered by date descendant * amountAsc: The result is ordered by amount descendant * amountDesc: The result is ordered by amount descendant 
     * @param {module:api/AccountsApi~searchAccountHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountHistoryResult>}
     */
    this.searchAccountHistory = function(owner, accountType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner == undefined || owner == null) {
        throw new Error("Missing the required parameter 'owner' when calling searchAccountHistory");
      }

      // verify the required parameter 'accountType' is set
      if (accountType == undefined || accountType == null) {
        throw new Error("Missing the required parameter 'accountType' when calling searchAccountHistory");
      }


      var pathParams = {
        'owner': owner,
        'accountType': accountType
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'datePeriod': this.apiClient.buildCollectionParam(opts['datePeriod'], 'csv'),
        'transferFilters': this.apiClient.buildCollectionParam(opts['transferFilters'], 'csv'),
        'transactionNumber': opts['transactionNumber'],
        'user': opts['user'],
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'by': opts['by'],
        'broker': opts['broker'],
        'channels': this.apiClient.buildCollectionParam(opts['channels'], 'csv'),
        'excludedIds': this.apiClient.buildCollectionParam(opts['excludedIds'], 'csv'),
        'accessClients': this.apiClient.buildCollectionParam(opts['accessClients'], 'csv'),
        'customFields': this.apiClient.buildCollectionParam(opts['customFields'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'amountRange': this.apiClient.buildCollectionParam(opts['amountRange'], 'csv'),
        'transferKinds': this.apiClient.buildCollectionParam(opts['transferKinds'], 'csv'),
        'chargedBack': opts['chargedBack'],
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AccountHistoryResult];

      return this.apiClient.callApi(
        '/{owner}/accounts/{accountType}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsersWithBalances operation.
     * @callback module:api/AccountsApi~searchUsersWithBalancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserWithBalanceResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for users together with balance information
     * Returns the users, together with their balances 
     * @param {String} accountType The account type
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {String} opts.keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products. 
     * @param {Array.<String>} opts.profileFields User profile fields, both basic (full name, login name, phone, e-mail,  etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon). For example, profileFields&#x3D;field1:value1,field2:value2. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, profileFields&#x3D;field1:valueA|valueB. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, profileFields&#x3D;rank:bronze|silver,birthDate:2000-01-01|2001-12-31 Would match results whose custom field with internal name &#39;rank&#39; is either bronze or silver, and whose &#39;birthDate&#39; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like customValues&#x3D;birthDate:|2001-12-31. The basic profile fields have one of the following identifiers: * Full name: name, fullName * Login name: username, loginName, login * E-mail: email * Phone: phone * Account number: accountNumber, account * Image: image (accepts a boolean value, indicating the presence of images) 
     * @param {Array.<String>} opts.usersToExclude Indicated the users to be excluded from the result 
     * @param {Array.<String>} opts.usersToInclude Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result. 
     * @param {Array.<Date>} opts.activationPeriod The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastLoginPeriod The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<String>} opts.groups Either id or internal names of groups / group sets
     * @param {Array.<String>} opts.brokers Either id or a principal (login name, e-mail, etc) for brokers
     * @param {Boolean} opts.mainBrokerOnly When set to &#x60;true&#x60;, will match only users that have the brokers as set in the &#x60;brokers&#x60; parameter as main broker.  
     * @param {Number} opts.latitude The reference latitude for distance searches
     * @param {Number} opts.longitude The reference longitude for distance searches
     * @param {Number} opts.maxDistance Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both &#x60;longitude&#x60; and &#x60;latitude&#x60; parameters are passed with the actual reference position. 
     * @param {module:model/String} opts.addressResult Determines which address is returned on the search, if any. By default no addresses are returned. This option is useful for displaying results as locations on a map. In all cases only located addresses (those that have the geographical coordinates set) are returned. When returning all addresses, data related with multiple addresses is returned multiple times. Possible values are: * none: Addresses are not returned. * all: All addresses are returned. * nearest: The nearest address from the reference location is returned. Only usable if a reference coordinate (&#x60;latitude&#x60; and &#x60;longitude&#x60;) * primary: The primary (default) address is returned 
     * @param {Boolean} opts.includeGroup When set to &#x60;true&#x60; and the logged user has permission to view user groups, will return the &#x60;group&#x60; property on users.  
     * @param {Boolean} opts.includeGroupSet When set to &#x60;true&#x60; and the logged user has permission to view user group sets, will return the &#x60;groupSet&#x60; property on users.  
     * @param {Array.<Number>} opts.balanceRange The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastIncomingTransferPeriod The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.lastOutgoingTransferPeriod The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.negativeSincePeriod The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Number>} opts.mediumBalanceRange An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won&#39;t be considered. 
     * @param {module:model/String} opts.orderBy Contains the possible &#39;order by&#39; values when searching for users with balances  Possible values are: * balanceAsc: User are ordered by balance, lower balances first. * balanceDesc: User are ordered by balance, higher balances first. * alphabeticallyAsc: Users are ordered by name (or whatever field is set to format users) in ascending order. * alphabeticallyDesc: Users are ordered by name (or whatever field is set to format users) in descending order. 
     * @param {module:api/AccountsApi~searchUsersWithBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserWithBalanceResult>}
     */
    this.searchUsersWithBalances = function(accountType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountType' is set
      if (accountType == undefined || accountType == null) {
        throw new Error("Missing the required parameter 'accountType' when calling searchUsersWithBalances");
      }


      var pathParams = {
        'accountType': accountType
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'keywords': opts['keywords'],
        'profileFields': this.apiClient.buildCollectionParam(opts['profileFields'], 'multi'),
        'usersToExclude': this.apiClient.buildCollectionParam(opts['usersToExclude'], 'csv'),
        'usersToInclude': this.apiClient.buildCollectionParam(opts['usersToInclude'], 'csv'),
        'activationPeriod': this.apiClient.buildCollectionParam(opts['activationPeriod'], 'csv'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv'),
        'lastLoginPeriod': this.apiClient.buildCollectionParam(opts['lastLoginPeriod'], 'csv'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'csv'),
        'brokers': this.apiClient.buildCollectionParam(opts['brokers'], 'csv'),
        'mainBrokerOnly': opts['mainBrokerOnly'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'maxDistance': opts['maxDistance'],
        'addressResult': opts['addressResult'],
        'includeGroup': opts['includeGroup'],
        'includeGroupSet': opts['includeGroupSet'],
        'balanceRange': this.apiClient.buildCollectionParam(opts['balanceRange'], 'csv'),
        'lastIncomingTransferPeriod': this.apiClient.buildCollectionParam(opts['lastIncomingTransferPeriod'], 'csv'),
        'lastOutgoingTransferPeriod': this.apiClient.buildCollectionParam(opts['lastOutgoingTransferPeriod'], 'csv'),
        'negativeSincePeriod': this.apiClient.buildCollectionParam(opts['negativeSincePeriod'], 'csv'),
        'mediumBalanceRange': this.apiClient.buildCollectionParam(opts['mediumBalanceRange'], 'csv'),
        'orderBy': opts['orderBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [UserWithBalanceResult];

      return this.apiClient.callApi(
        '/accounts/{accountType}/user-balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
