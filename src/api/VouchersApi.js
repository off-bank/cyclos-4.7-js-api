/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BigDecimal', 'model/BuyVoucher', 'model/BuyVoucherError', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/RedeemVoucher', 'model/RedeemVoucherError', 'model/UnauthorizedError', 'model/UserVouchersDataForSearch', 'model/VoucherDataForBuy', 'model/VoucherDataForRedeem', 'model/VoucherInitialDataForRedeem', 'model/VoucherRedeemResult', 'model/VoucherResult', 'model/VoucherView'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BigDecimal'), require('../model/BuyVoucher'), require('../model/BuyVoucherError'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/RedeemVoucher'), require('../model/RedeemVoucherError'), require('../model/UnauthorizedError'), require('../model/UserVouchersDataForSearch'), require('../model/VoucherDataForBuy'), require('../model/VoucherDataForRedeem'), require('../model/VoucherInitialDataForRedeem'), require('../model/VoucherRedeemResult'), require('../model/VoucherResult'), require('../model/VoucherView'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.VouchersApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.BigDecimal, root.Cyclos471Api.BuyVoucher, root.Cyclos471Api.BuyVoucherError, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.RedeemVoucher, root.Cyclos471Api.RedeemVoucherError, root.Cyclos471Api.UnauthorizedError, root.Cyclos471Api.UserVouchersDataForSearch, root.Cyclos471Api.VoucherDataForBuy, root.Cyclos471Api.VoucherDataForRedeem, root.Cyclos471Api.VoucherInitialDataForRedeem, root.Cyclos471Api.VoucherRedeemResult, root.Cyclos471Api.VoucherResult, root.Cyclos471Api.VoucherView);
  }
}(this, function(ApiClient, BigDecimal, BuyVoucher, BuyVoucherError, Error, ForbiddenError, NotFoundError, RedeemVoucher, RedeemVoucherError, UnauthorizedError, UserVouchersDataForSearch, VoucherDataForBuy, VoucherDataForRedeem, VoucherInitialDataForRedeem, VoucherRedeemResult, VoucherResult, VoucherView) {
  'use strict';

  /**
   * Vouchers service.
   * @module api/VouchersApi
   * @version 4.7.1
   */

  /**
   * Constructs a new VouchersApi. 
   * @alias module:api/VouchersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the buyVouchers operation.
     * @callback module:api/VouchersApi~buyVouchersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buys one or more vouchers for the given user
     * Buys vouchers. If the payment type has custom fields, the values should be passed as well  
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {module:model/BuyVoucher} params The buy voucher parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.confirmationPassword The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. 
     * @param {module:api/VouchersApi~buyVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.buyVouchers = function(user, params, opts, callback) {
      opts = opts || {};
      var postBody = params;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling buyVouchers");
      }

      // verify the required parameter 'params' is set
      if (params == undefined || params == null) {
        throw new Error("Missing the required parameter 'params' when calling buyVouchers");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
        'confirmationPassword': opts['confirmationPassword']
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/{user}/vouchers/buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserVouchersDataForSearch operation.
     * @callback module:api/VouchersApi~getUserVouchersDataForSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserVouchersDataForSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for searching vouchers an user has bought or redeemed
     * Returns configuration data used to search vouchers the user has either bought (default) or redeemed (if &#x60;type&#x60; is &#x60;redeemed&#x60;) 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:model/String} opts.relation Indicates the relation used to filter the vouchers. Possible values are: * bought: A voucher the user has bought * redeemed: A voucher the user has redeemed 
     * @param {module:api/VouchersApi~getUserVouchersDataForSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserVouchersDataForSearch}
     */
    this.getUserVouchersDataForSearch = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getUserVouchersDataForSearch");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'relation': opts['relation']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserVouchersDataForSearch;

      return this.apiClient.callApi(
        '/{user}/vouchers/data-for-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherDataForBuy operation.
     * @callback module:api/VouchersApi~getVoucherDataForBuyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoucherDataForBuy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for buying a voucher of a specified type
     * Data for buying a voucher
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} type Either the &#x60;id&#x60; or &#x60;internalName&#x60; of the voucher type 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/VouchersApi~getVoucherDataForBuyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoucherDataForBuy}
     */
    this.getVoucherDataForBuy = function(user, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getVoucherDataForBuy");
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw new Error("Missing the required parameter 'type' when calling getVoucherDataForBuy");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'type': type
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VoucherDataForBuy;

      return this.apiClient.callApi(
        '/{user}/vouchers/data-for-buy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherDataForRedeem operation.
     * @callback module:api/VouchersApi~getVoucherDataForRedeemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoucherDataForRedeem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for redeeming a voucher by token
     * Data for redeeming a specific voucher
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} token The voucher token to be redeemed
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/VouchersApi~getVoucherDataForRedeemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoucherDataForRedeem}
     */
    this.getVoucherDataForRedeem = function(user, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getVoucherDataForRedeem");
      }

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling getVoucherDataForRedeem");
      }


      var pathParams = {
        'user': user,
        'token': token
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VoucherDataForRedeem;

      return this.apiClient.callApi(
        '/{user}/vouchers/{token}/data-for-redeem', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherInitialDataForRedeem operation.
     * @callback module:api/VouchersApi~getVoucherInitialDataForRedeemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoucherInitialDataForRedeem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns initial data for redeeming vouchers
     * Returns initial data for redeeming vouchers
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/VouchersApi~getVoucherInitialDataForRedeemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoucherInitialDataForRedeem}
     */
    this.getVoucherInitialDataForRedeem = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling getVoucherInitialDataForRedeem");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VoucherInitialDataForRedeem;

      return this.apiClient.callApi(
        '/{user}/vouchers/data-for-redeem', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherQrCode operation.
     * @callback module:api/VouchersApi~getVoucherQrCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the QR-code image for the given voucher
     * The api documentation page, using swagger-ui (or any direct usage of an image tag), generates a second  request to show the image contents on the preview. This is a new GET request, without passing-in the authentication parameters. As this path requires authentication, the image is shown broken, but the first request works as expected, returning the image content. Optionally, to solve the problem described above and allow to authenticate the user when using sessions, a &#x60;sessionToken&#x60; or &#x60;accessClientToken&#x60; plus a &#x60;channel&#x60; query parameters could be specified. 
     * @param {String} key The voucher &#x60;id&#x60; or &#x60;token&#x60;. When the token is fully numeric, it must be preceded by a single quote (&#x60;&#39;&#x60;). 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.size The possible sizes of images. The actual pixel size depends on the configuration in Cyclos Possible values are: * small: Small thumbnail * medium: Medium thumbnail * large: Full image size 
     * @param {module:api/VouchersApi~getVoucherQrCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getVoucherQrCode = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling getVoucherQrCode");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'image/jpeg', 'image/gif', 'image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/vouchers/{key}/qr-code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the redeemVoucher operation.
     * @callback module:api/VouchersApi~redeemVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoucherRedeemResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeems a voucher for the given user
     * Redeems a voucher  
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {String} token The voucher token to be redeemed
     * @param {Object} opts Optional parameters
     * @param {module:model/RedeemVoucher} opts.redeem Additional redeem data
     * @param {module:api/VouchersApi~redeemVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoucherRedeemResult}
     */
    this.redeemVoucher = function(user, token, opts, callback) {
      opts = opts || {};
      var postBody = opts['redeem'];

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling redeemVoucher");
      }

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling redeemVoucher");
      }


      var pathParams = {
        'user': user,
        'token': token
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VoucherRedeemResult;

      return this.apiClient.callApi(
        '/{user}/vouchers/{token}/redeem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUserVouchers operation.
     * @callback module:api/VouchersApi~searchUserVouchersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VoucherResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for vouchers an user has bought or redeemed
     * Returns the list of matching vouchers the given user has either bought (default) or redeemed (if &#x60;type&#x60; is &#x60;redeemed&#x60;) 
     * @param {String} user The user identification. The value &#39;self&#39; (sans quotes) means the currently authenticated user. The possible idenfitication methods are those whose profile fields are allowed in user keywords. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {Number} opts.page The page number (zero-based) of the search. The default value is zero. 
     * @param {Number} opts.pageSize The maximum number of records that will be returned on the search. The default value is 40. 
     * @param {module:model/String} opts.relation Indicates the relation used to filter the vouchers. Possible values are: * bought: A voucher the user has bought * redeemed: A voucher the user has redeemed 
     * @param {Array.<module:model/BigDecimal>} opts.amountRange The minimum / maximum voucher amount 
     * @param {Array.<Date>} opts.creationPeriod The minimum / maximum voucher creation date. Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.expirationPeriod The minimum / maximum voucher expiration date Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<Date>} opts.redeemPeriod The minimum / maximum voucher redeem date Is expressed an array, with the lower bound as first element, and the upper bould as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. 
     * @param {Array.<module:model/String>} opts.statuses The voucher statuses Possible values for each array element are: * open: The voucher has been generated / bought, and is open * expired: The voucher has expired without being redeemed * canceled: The voucher was canceled, and cannot be further used * redeemed: The voucher has been redeemed, and the corresponding payment was done 
     * @param {String} opts.token The voucher token (with or without mask)
     * @param {Array.<String>} opts.types The ids or internal names of voucher types
     * @param {module:api/VouchersApi~searchUserVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VoucherResult>}
     */
    this.searchUserVouchers = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling searchUserVouchers");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'relation': opts['relation'],
        'amountRange': this.apiClient.buildCollectionParam(opts['amountRange'], 'csv'),
        'creationPeriod': this.apiClient.buildCollectionParam(opts['creationPeriod'], 'csv'),
        'expirationPeriod': this.apiClient.buildCollectionParam(opts['expirationPeriod'], 'csv'),
        'redeemPeriod': this.apiClient.buildCollectionParam(opts['redeemPeriod'], 'csv'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'token': opts['token'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [VoucherResult];

      return this.apiClient.callApi(
        '/{user}/vouchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewVoucher operation.
     * @callback module:api/VouchersApi~viewVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoucherView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data for a particular voucher
     * Returns details about a particular voucher, as well as the transactions used to buy and redeem, and the permissions for authenticated over it. 
     * @param {String} key The voucher &#x60;id&#x60; or &#x60;token&#x60;. When the token is fully numeric, it must be preceded by a single quote (&#x60;&#39;&#x60;). 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {module:api/VouchersApi~viewVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoucherView}
     */
    this.viewVoucher = function(key, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling viewVoucher");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VoucherView;

      return this.apiClient.callApi(
        '/vouchers/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
