/**
 * Cyclos 4.7.1 API
 * The REST API for Cyclos 4.7.1
 *
 * OpenAPI spec version: 4.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataForMobileGuest', 'model/DataForMobileUser', 'model/Error', 'model/ForbiddenError', 'model/NotFoundError', 'model/UnauthorizedError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataForMobileGuest'), require('../model/DataForMobileUser'), require('../model/Error'), require('../model/ForbiddenError'), require('../model/NotFoundError'), require('../model/UnauthorizedError'));
  } else {
    // Browser globals (root is window)
    if (!root.Cyclos471Api) {
      root.Cyclos471Api = {};
    }
    root.Cyclos471Api.MobileApi = factory(root.Cyclos471Api.ApiClient, root.Cyclos471Api.DataForMobileGuest, root.Cyclos471Api.DataForMobileUser, root.Cyclos471Api.Error, root.Cyclos471Api.ForbiddenError, root.Cyclos471Api.NotFoundError, root.Cyclos471Api.UnauthorizedError);
  }
}(this, function(ApiClient, DataForMobileGuest, DataForMobileUser, Error, ForbiddenError, NotFoundError, UnauthorizedError) {
  'use strict';

  /**
   * Mobile service.
   * @module api/MobileApi
   * @version 4.7.1
   */

  /**
   * Constructs a new MobileApi. 
   * @alias module:api/MobileApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the dataForMobileGuest operation.
     * @callback module:api/MobileApi~dataForMobileGuestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForMobileGuest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data the mobile application uses while in guest mode
     * The data returned can be controlled with a cache key. Each data type has a parameter, such as &#x60;headerIf&#x60;, which returns the data only if it has changed since the last request. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {String} opts.cyclosVersion The last known Cyclos version. Sometimes, data to be cached depends on the version of the Cyclos application, and this helps controlling such cases 
     * @param {String} opts.headerIf Controls the header cache. It is a string in the form &#x60;id|version&#x60;. When informed, the header content will be returned only if it has changed since the last run. 
     * @param {String} opts.footerIf Controls the footer cache. It is a string in the form &#x60;id|version&#x60;. When informed, the footer content will be returned only if it has changed since the last run. 
     * @param {String} opts.themeIf Controls the theme cache. It is a string in the form &#x60;id|version&#x60;. When informed, the theme CSS content will be returned only if it has changed since the last run. 
     * @param {String} opts.translationsIf Controls the translations cache. It is a string in the form &#x60;id|version&#x60;. When informed, the mobile translations will be returned only if they have changed since the last run. 
     * @param {module:api/MobileApi~dataForMobileGuestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForMobileGuest}
     */
    this.dataForMobileGuest = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'cyclosVersion': opts['cyclosVersion'],
        'headerIf': opts['headerIf'],
        'footerIf': opts['footerIf'],
        'themeIf': opts['themeIf'],
        'translationsIf': opts['translationsIf']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForMobileGuest;

      return this.apiClient.callApi(
        '/mobile/data-for-guest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataForMobileUser operation.
     * @callback module:api/MobileApi~dataForMobileUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataForMobileUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data the mobile application uses in either user or POS mode 
     * The data returned can be controlled with a cache key. Each data type has a parameter, such as &#x60;helpIf&#x60;, which returns the data only if it has changed since the last request. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields Select which fields to include on returned data. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: &#x60;a,b.b1,c.-c1,c.-c2&#x60; will return the fields &#x60;a&#x60;, &#x60;b&#x60; (containing only the &#x60;b1&#x60; field) and &#x60;c&#x60; (containing all its fields except for &#x60;c1&#x60; or &#x60;c2&#x60;).  
     * @param {String} opts.cyclosVersion The last known Cyclos version. Sometimes, data to be cached depends on the version of the Cyclos application, and this helps controlling such cases 
     * @param {String} opts.themeIf Controls the theme cache. It is a string in the form &#x60;id|version&#x60;. When informed, the theme CSS content will be returned only if it has changed since the last run. 
     * @param {String} opts.translationsIf Controls the translations cache. It is a string in the form &#x60;id|version&#x60;. When informed, the mobile translations will be returned only if they have changed since the last run. 
     * @param {String} opts.mobileHelpIf Controls the mobile help cache. It is a string in the form &#x60;id|version&#x60;. When informed, the help content will be returned only if it has changed since the last run and the access is via user / password. 
     * @param {String} opts.posHelpIf Controls the pos help cache. It is a string in the form &#x60;id|version&#x60;. When informed, the help content will be returned only if it has changed since the last run and the access is via access client. 
     * @param {module:api/MobileApi~dataForMobileUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataForMobileUser}
     */
    this.dataForMobileUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'cyclosVersion': opts['cyclosVersion'],
        'themeIf': opts['themeIf'],
        'translationsIf': opts['translationsIf'],
        'mobileHelpIf': opts['mobileHelpIf'],
        'posHelpIf': opts['posHelpIf']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataForMobileUser;

      return this.apiClient.callApi(
        '/mobile/data-for-user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mobilePageContent operation.
     * @callback module:api/MobileApi~mobilePageContentCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the content of a mobile page 
     * Returns the content of a mobile page, either by id or internal name 
     * @param {String} id The mobile page id
     * @param {module:api/MobileApi~mobilePageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.mobilePageContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling mobilePageContent");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['session', 'basic', 'accessClient'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/html'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/mobile/page/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
